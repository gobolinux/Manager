from qt import *
#from GraphicalTailForm import *

from LoggersWrapperForm import *

class Logger :
	def __init__(self, name, loggersWrapper) :
		self.loggersWrapper = loggersWrapper
		self.name = name
		
		self.tab = QWidget(loggersWrapper.tabWidget2, name)
		tabLayout = QGridLayout(self.tab,1,1,11,6,"tabLayout")
	
		self.textWidget = QTextEdit(self.tab,"textWidget")
		self.textWidget.setReadOnly(1)
	
		tabLayout.addMultiCellWidget(self.textWidget,0,0,0,4)
	
		self.pauseButton = QPushButton(self.tab,"pauseButton")
		self.pauseButton.setEnabled(0)
		self.pauseButton.setDefault(1)
	
		tabLayout.addWidget(self.pauseButton,1,2)
	
		self.resumeButton = QPushButton(self.tab,"resumeButton")
		self.resumeButton.setEnabled(0)
		self.resumeButton.setDefault(1)
	
		tabLayout.addWidget(self.resumeButton,1,3)
	
		self.abortButton = QPushButton(self.tab,"abortButton")
		self.abortButton.setEnabled(0)
		self.abortButton.setDefault(1)
	
		tabLayout.addWidget(self.abortButton,1,4)
	
		self.autoScroll = QCheckBox(self.tab,"autoScroll")
		self.autoScroll.setChecked(1)
	
		tabLayout.addWidget(self.autoScroll,1,0)
		spacer2 = QSpacerItem(31,20,QSizePolicy.Expanding,QSizePolicy.Minimum)
		tabLayout.addItem(spacer2,1,1)
		
		loggersWrapper.tabWidget2.insertTab(self.tab,QString(""))

		loggersWrapper.connect(self.abortButton,SIGNAL("released()"),self.abortSubprocess)
		loggersWrapper.connect(self.pauseButton,SIGNAL("released()"),self.pauseSubprocess)
		loggersWrapper.connect(self.resumeButton,SIGNAL("released()"),self.resumeSubprocess)
		
	
		self.loggersWrapper.tabWidget2.changeTab(self.tab,self.name)
		self.initialize()
		self.languageChange()
	
	def remove(self) :
		self.loggersWrapper.tabWidget2.removePage(self.tab)
	
	def languageChange(self):
		#self.setCaption(self.__tr("GoboLinux Manager"))
		#self.textWidget.setText(QString.null)
		self.autoScroll.setText("Force Auto scroll")
		#self.okButton.setText(self.__tr("&Ok"))
		#self.okButton.setAccel(self.__tr("Alt+O"))
		self.abortButton.setText("&Abort")
		#self.abortButton.setAccel("Alt+A")
		self.pauseButton.setText("&Pause")
		#self.pauseButton.setAccel("Alt+P")
		self.resumeButton.setText("&Resume")
		#self.resumeButton.setAccel("Alt+R")
	
	output = None
	def initialize(self) :
		#self.output = open('/tmp/GoboLinuxInstall.log', 'w')
		
		self.abortOrdered = False
		self.subprocessPid = 0
		
		self.color = {}
		                         # warning, sad smiles ahead
		self.color['Gray']       =('\033[1;30m' , '<font color="#625D5D">')
		
		self.color['BoldRed']    =('\033[1;31m' , '<font color="#F62217">')
		self.color['Red0']       =('\033[0;31m' , '<font color="#770000">')
		self.color['Red']        =('\033[31m'   , '<font color="#770000">')
		
		self.color['BoldGreen']  =('\033[1;32m' , '<font color="#347C17">')
		self.color['Green0']     =('\033[0;32m' , '<font color="#4CC417">')
		self.color['Green']      =('\033[32m'   , '<font color="#4CC417">')
		
		self.color['BoldYellow'] =('\033[1;33m' , '<font color="#FDD017">')
		self.color['Yellow0']    =('\033[0;33m' , '<font color="#AF7817">')
		self.color['Yellow']     =('\033[33m'   , '<font color="#AF7817">')
		
		self.color['BoldBlue']   =('\033[1;34m' , '<font color="#2554C7">')
		self.color['Blue0']      =('\033[0;34m' , '<font color="#342D7E">')
		self.color['Blue']       =('\033[34m'   , '<font color="#342D7E">')
		
		self.color['BoldMagenta']=('\033[1;35m' , '<font color="#777777">')
		self.color['Magenta0']   =('\033[0;35m' , '<font color="#C031C7">')
		self.color['Magenta']    =('\033[35m'   , '<font color="#C031C7">')
		
		self.color['BoldCyan']   =('\033[1;36m' , '<font color="#43C6DB">')
		self.color['Cyan0']      =('\033[0;36m' , '<font color="#4C7D7E">')
		self.color['Cyan']       =('\033[36m'   , '<font color="#4C7D7E">')
		
		self.color['BoldWhite']  =('\033[1;37m' , '<font color="#000000">')
		self.color['White0']     =('\033[0;37m' , '<font color="#000000">')
		self.color['White']      =('\033[37m'   , '<font color="#000000">')
		
		self.color['Normal']     =('\033[0m'    , '</font>')

	def enableOk(self) :
		self.subprocessPid = 0
		#self.okButton.setEnabled(True)
		self.abortButton.setEnabled(False)
		self.pauseButton.setEnabled(False)
		self.resumeButton.setEnabled(False)

	def append(self, s) :
		self.loggersWrapper.tabWidget2.changeTab(self.tab,self.name+" *")
		#f = self.tab.font()
		#print f
		#f.setBold(True)
		#f = self.tab.setFont(f)
		
		# filtering some anoying lines
		if s.find('already defined in') > -1 or s.find('seems to be moved') > -1 :
			return
		
		vs = self.textWidget.verticalScrollBar()
		doScroll  = (vs.maxValue() <= vs.value())
		
		for key in self.color.keys() :
			terminal, html = self.color[key]
			s = s.replace(terminal, html)
		self.textWidget.append(s)
		
		if self.autoScroll.isChecked() :
			self.textWidget.ensureVisible (0, 999999) # scroll down

		
	def insert(self, s) :
		qApp.lock()
		self.textWidget.insertAt(s, self.textWidget.paragraphs()-1, self.textWidget.paragraphLength(self.textWidget.paragraphs()-1))
		qApp.unlock()
		
	def abortSubprocess(self) :
		self.loggersWrapper.tabWidget2.changeTab(self.tab,self.name)
		self.abortOrdered = True
		
		if self.subprocessPid :
			# a small dirty hack to allow killing the subprocess group, without killing Manager itself
			#   signal.SIG_IGN -> ignores the signal
			#   signal.SIG_DFL -> signal default action
			# -----------------------------------
			import signal, os
			signal.signal(signal.SIGTERM, signal.SIG_IGN)
			os.killpg(os.getpgid(self.subprocessPid), signal.SIGTERM)
			signal.signal(signal.SIGTERM, signal.SIG_DFL)
			# -----------------------------------
			
			self.subprocessPid = 0
			self.append('<font color="#F62217">Aborted by the user</font><br>')
			#self.okButton.setText("&Close")
			
			self.resumeButton.setEnabled(False)
			self.pauseButton.setEnabled(False)
			self.abortButton.setEnabled(False)
			
	
	def pauseSubprocess(self) :
		if self.subprocessPid :
			import signal, os
			signal.signal(signal.SIGTSTP, signal.SIG_IGN)
			os.killpg(os.getpgid(self.subprocessPid), signal.SIGTSTP)
			signal.signal(signal.SIGTSTP, signal.SIG_DFL)
			
			self.append('<font color="#F62217">Paused by the user</font><br>')
			self.resumeButton.setEnabled(True)
			self.pauseButton.setEnabled(True)
			self.abortButton.setEnabled(False)
	
	def resumeSubprocess(self) :
		if self.subprocessPid :
			import signal, os
			os.killpg(os.getpgid(self.subprocessPid), signal.SIGCONT)
			
			self.append('<font color="#F62217">Resumed</font><br>')
			self.pauseButton.setEnabled(True)
			self.resumeButton.setEnabled(False)
			self.abortButton.setEnabled(True)
	
	def setFocus(self) :
		self.loggersWrapper.tabWidget2.setCurrentPage(self.loggersWrapper.tabWidget2.indexOf(self.tab))
	
	
	def getFocusedTabName(self) :
		return str(self.loggersWrapper.tabWidget2.label(self.loggersWrapper.tabWidget2.currentPageIndex()))
	
	def finished(self) :
		self.loggersWrapper.tabWidget2.changeTab(self.tab,self.name)
		self.subprocessPid = 0
		self.abortButton.setEnabled(False)
		self.pauseButton.setEnabled(False)
		self.resumeButton.setEnabled(False)
		
	
	def setSubprocessPid(self, pid) :
		self.subprocessPid = pid
		self.abortButton.setEnabled(True)
		self.pauseButton.setEnabled(True)
		self.resumeButton.setEnabled(False)
		
	def loggersWrapper(self) :
		return self.loggersWrapper
	
class LoggersWrapper(LoggersWrapperForm):
	def __init__(self, callOnClose = None) :
		LoggersWrapperForm.__init__(self)
		self.tabWidget2.removePage(self.tabWidget2.page(0))
		self.callOnClose = callOnClose
		
	def closeEvent(self, e) :
		self.callOnClose(False)
		e.accept()
	
	#def closeEvent(self, e) :
	#	if self.subprocessPid :
	#		#self.abortSubprocess()
	#		pass
	#	else :
	#		e.accept()
