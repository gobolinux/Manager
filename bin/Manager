#!/usr/bin/python

# GoboLinux Manager
#
#
# (C) 2004-2005 Andre Detsch. Released under the GNU GPL.
#          detsch at gobolinux.org
#
# PyQT based front-end to easy the task of managing the installed packages
#

import string, os, os.path, sys, re, urllib, time

from ManagerUI         import *
from ManagerConfigForm import *
from ManagerRunner     import *

from DescribeProgram   import DescribeProgram
from GuessLatest       import GuessLatest
from GuessProgramCase  import GuessProgramCase
from GetInstalled      import KeyInsensitiveDict
from GetInstalled      import GetInstalled
from GetAvailable      import GetAvailable, getGoboVariable
from GenericEditor     import *
from PythonUtils       import *
from CheckDependencies import *

goboPrograms = getGoboVariable('goboPrograms')
goboShared   = getGoboVariable('goboShared')

goboSettings = getGoboVariable('goboSettings')
goboLinks    = getGoboVariable('goboLinks')

iconsDir = goboShared+"/Manager/icons/"

qApp = QApplication(sys.argv)

openProgramPixmap       = QPixmap(iconsDir+"/folder_open.png_XX")
unistalledProgramPixmap = QPixmap(iconsDir+"/folder.png")
currentVersionPixmap    = QPixmap(iconsDir+"/folder_green.png")
unlinkedVersionPixmap   = QPixmap(iconsDir+"/folder_grey.png")
otherVersionPixmap      = QPixmap(iconsDir+"/folder.png")

recipeIcon         = 'contents.png'
localBinaryIcon    = 'ark_azul.png'
officialBinaryIcon = 'ark.png'
contribBinaryIcon  = 'ark_grey.png'
trackedIcon        = 'xmag.png'

class ManagerUIImpl(ManagerUI) :
	initialized = False
	
	def selectAllOfficialPackages(self) :
		self.selectAll(self.availables['official_package']['pixmap'])
	def selectAllLocalPackages(self) :
		self.selectAll(self.availables['local_package']['pixmap'])
	def selectAllContributedPackages(self) :
		self.selectAll(self.availables['contrib_package']['pixmap'])
	def selectAllTracked(self) :
		self.selectAll(self.availables['tracked']['pixmap'])
	def selectAllRecipes(self) :
		self.selectAll(self.availables['recipe']['pixmap'])
	def selectAllInstalledCurrent(self) :
		self.selectAll(currentVersionPixmap)
	def selectAllInstalledOther(self) :
		self.selectAll(otherVersionPixmap)
	def selectAllInstalledUnlinked(self) :
		self.selectAll(unlinkedVersionPixmap)

	def selectAll(self, icon) :
		pList = self.getCurrentList()
		i = QListViewItemIterator(pList) 
		while True :
			c = i.current()
			if not c :
				break
			if c.pixmap(0) and c.pixmap(0).serialNumber() == icon.serialNumber() :
				c.setSelected(True)
				c.repaint()
			i += 1
		
	def rescan(self) :
		if not self.rescaning :
			self.rescaning = 1
			self.forceAvailablesRescan(False)
			self.forceInstalledRescan(False)
			self.rescaning = 0
			self.refresh()
		
	def forceAvailablesRescan(self, refresh=True) :
		self.needToUpdateAvailables = 1
		self.updateIfNeeded()
		if refresh :
			self.refresh()
	
	def forceInstalledRescan(self, refresh=True) :
		self.needToUpdateInstalled = 1
		self.updateIfNeeded()
		if refresh :
			self.refresh()

	def refreshIfFiltering(self) :
		if self.applyFilter.isOn() :
			self.refresh()
		
	def refresh(self) : #
		(p,v,r,t) = self.getCurrentTuple()
		self.updateVisualTree()
		self.showVisualTree()
		if p :
			item = self.getCurrentList().findItem(p, 0)
			if item :
				self.getCurrentList().ensureItemVisible(item)
			else :
				self.pList.ensureVisible(0, 0)
				self.pList_2.ensureVisible(0, 0)
				self.pList_3.ensureVisible(0, 0)
		else :
			self.pList.ensureVisible(0, 0)
			self.pList_2.ensureVisible(0, 0)
			self.pList_3.ensureVisible(0, 0)
	
	def deleteCommand(self) : #
		try :
			del(self.programsAtQueue[str(self.commandsQueue.text(self.commandsQueue.currentItem()))])
		except :
			pass
		self.commandsQueue.removeItem(self.commandsQueue.currentItem())
		self.enableOrDisableQueueActions()
		self.autoSaveQueue()
	
	def clearCommands(self) : #
		self.commandsQueue.clear()
		self.enableOrDisableQueueActions()
		self.autoSaveQueue()
		
	def saveCommands(self) : #
		filename = QFileDialog.getSaveFileName()
		
		if not filename :
			return
		filename = str(filename)
		
		if os.access(filename, os.F_OK) :
			resp = QMessageBox.warning(self, 'Save commands', 'File '+filename+' exists.\nOverwrite?', 'Yes', 'No')
			if resp != 0:
				return
		
		s = self.getQueue()
		f = open(filename, 'w')
		f.write(s)
		f.close()
		
	def getQueue(self) :
		ret = ''
		cmds = []
		for i in range(self.commandsQueue.count()) :
			cmds.append(str(self.commandsQueue.text(i)))
		for cmd in cmds :
			ret += cmd+' #'+ str(self.programsAtQueue[cmd]) +'\n'
		return ret
		
	def openCommands(self) : #
		filename =  QFileDialog.getOpenFileName()
		if not filename :
			return
		filename = str(filename)
		
		if not os.access(filename, os.R_OK) :
			resp = QMessageBox.warning(self, 'Open commands', 'File '+filename+' not found.', 'Ok')
		
		f = open(filename)
		s = f.read().strip()
		f.close()
		self.setQueue(s)
		
	def setQueue(self, commands) :
		cmds=[]
		for cmd in commands.split('\n') :
			c = cmd.strip()
			if c :
				cmds.append(c)
		
		self.commandsQueue.clear()
		for cmd in cmds :
			if cmd.find('#') > -1 :
  				self.programsAtQueue[cmd.split('#')[0]] = cmd.split('#')[1]
				self.commandsQueue.insertItem(cmd.split('#')[0])
			else :
				self.programsAtQueue[cmd] = "<BLOCK>"
				self.commandsQueue.insertItem(cmd)
		self.enableOrDisableQueueActions()
		self.autoSaveQueue()
	
	def editCommandAtQueue(self, item = None) :
		if not item :
			item = self.commandsQueue.selectedItem()
			if not item :
				return
		
		old = str(item.text())
		new,ok = QInputDialog.getText('Edit command', '',  QLineEdit.Normal, old)
		if ok :
			i = self.commandsQueue.index(item)
			self.commandsQueue.removeItem(i)
			self.commandsQueue.insertItem(str(new), i)
		self.autoSaveQueue()

	def showConfigurationWindow(self) : #
		self.connect(self.configWindow.okButton,SIGNAL("clicked()"),self.saveSettings)
		self.connect(self.configWindow.cancelButton,SIGNAL("clicked()"),self.readSettings)
		self.configWindow.show()
	
	def loadPreviousQueue(self) :
		self.setQueue(str(self.settings.readEntry('/options/Manager/CommandsQueue', '')[0]))
	
	def autoSaveQueue(self) :
		self.settings.writeEntry('/options/Manager/CommandsQueue', self.getQueue())
	
	def writeSetting(self, widget) :
		t = str(widget).split()[0][1:]
		n = widget.name()
		if t == 'qt.QLineEdit' :
			self.settings.writeEntry('/options/Manager/'+n, widget.text())
		elif t == 'qt.QCheckBox' :
			self.settings.writeEntry('/options/Manager/'+n, widget.isChecked())
		elif t == 'qt.QAction' :
			self.settings.writeEntry('/options/Manager/'+n, widget.isOn())
		elif t == 'qt.QSpinBox' :
			self.settings.writeEntry('/options/Manager/'+n, widget.value())
		else :
			print 'Invalid type:',widget

	def readSetting(self, widget, default = False) :
		t = str(widget).split()[0][1:]
		n = widget.name()
		if t == 'qt.QLineEdit' :
			if not default :
				default = ''
			widget.setText(self.settings.readEntry('/options/Manager/'+n, default)[0])
		elif t == 'qt.QCheckBox' :
			widget.setChecked(self.settings.readBoolEntry('/options/Manager/'+n, default)[0])
		elif t == 'qt.QAction' :
			widget.setOn(self.settings.readBoolEntry('/options/Manager/'+n, default)[0])
		elif t == 'qt.QSpinBox' :
			widget.setValue(self.settings.readNumEntry('/options/Manager/'+n, default)[0])
		else :
			print 'Invalid type:',widget
	
	def resetSetting(self, widget, default = False) :
		t = str(widget).split()[0][1:]
		n = widget.name()
		if t == 'qt.QLineEdit' :
			if not default :
				default = ''
			widget.setText(default)
		elif t == 'qt.QCheckBox' :
			widget.setChecked(default)
		elif t == 'qt.QAction' :
			widget.setOn(default)
		elif t == 'qt.QSpinBox' :
			widget.setValue(default)
		else :
			print 'Invalid type:',widget
		
	def getSettings(self) :
		return [
		(self.configWindow.useDefaultCreatePackageDirectory, False),
		(self.configWindow.defaultCreatePackageDirectory,    '/Depot/Packages'),
		(self.configWindow.dontSplitDownload,                False),
		(self.configWindow.keepDownloadedPackages,           False),
		(self.configWindow.useCompatibilityModeInteraction,  False),
		(self.configWindow.noWeb,                            False),
		(self.configWindow.allwaysUpdate,                    False),
		(self.configWindow.threadsBandwidth,                 1),
		(self.configWindow.threadsCPU,                       1),
		(self.configWindow.threadsOther,                     1),
		
		(self.autorunAction,                                 False),
		(self.detectUnlinkedAction,                          False),
		(self.show_local_package,                            False),
		(self.show_official_package,                         True ),
		(self.show_contrib_package,                          False),
		(self.show_recipe,                                   True ),
		(self.show_tracked,                                  False),
		(self.showOutdatedAvailableAction,                   False),
		(self.hideInstalledAction,                           False)
		]
		
	def saveSettings(self, refresh=True) : #
		for item, default in self.getSettings():
			self.writeSetting(item)
		if refresh :
			self.forceAvailablesRescan()
			self.updateLoggersWindow()
		
	def readSettings(self) : #
		for item, default in self.getSettings():
			self.readSetting(item, default)
	
	def resetSettings(self) :
		for item, default in self.getSettings():
			self.resetSetting(item, default)
		self.forceAvailablesRescan()
		
	def getAvailableWrapper(self, forceUpdate = False) :
		return GetAvailable(['local_package', 'official_package', 'recipe', 'contrib_package', 'tracked'], None, forceUpdate, graphicalProgressHook, self.availables, accessWeb = (not self.configWindow.noWeb.isChecked()), doNotUpdate = (self.availables != None))
		
	def init(self) :
		self.vSplit.setSizes([240, 400])
		self.hSplit.setSizes([400, 200])
	
		self.pList.header().hide()
		self.pList_2.header().hide()
		self.pList_3.header().hide()
		
		self.configWindow = ManagerConfigForm(modal=1)
		
		self.installed = {}
		
		self.rescaning = 0
		self.needToUpdateInstalled  = 1
		self.needToUpdateAvailables = 0
	
		self.installedProgramActions = [self.symlinkProgramAction, self.symlinkProgramOverwriteAction, self.removeProgramAction, self.disableProgramAction, self.createPackageAction]
		
		self.visualTree = None
		
		self.availables = None
		self.availables = self.getAvailableWrapper()

		self.availables['local_package']['pixmap']     = QPixmap(iconsDir+'/'+localBinaryIcon)
		self.availables['local_package']['show']       = self.show_local_package.isOn
		self.availables['local_package']['actions']    = [self.installPackageAction]
		
		self.availables['official_package']['pixmap']     = QPixmap(iconsDir+'/'+officialBinaryIcon)
		self.availables['official_package']['show']       = self.show_official_package.isOn
		self.availables['official_package']['actions']    = [self.installPackageAction, self.downloadPackageAction]
		
		self.availables['contrib_package']['pixmap']     = QPixmap(iconsDir+'/'+contribBinaryIcon)
		self.availables['contrib_package']['show']       = self.show_contrib_package.isOn 
		self.availables['contrib_package']['actions']    = [self.installPackageAction,self.downloadPackageAction]
		
		self.availables['recipe']['pixmap']   = QPixmap(iconsDir+'/'+recipeIcon)
		self.availables['recipe']['show']     = self.show_recipe.isOn 
		self.availables['recipe']['actions']  = [self.compileRecipeAction, self.fetchRecipeAction, self.newVersionAction, self.doEditRecipeAction]
		
		self.availables['tracked']['pixmap']  = QPixmap(iconsDir+'/'+trackedIcon)
		self.availables['tracked']['show']    = self.show_tracked.isOn 
		self.availables['tracked']['actions'] = [self.newVersionAction] #, self.newVersionAndCompileAction]
		
		self.allActions = self.installedProgramActions[:]
		for t in self.availables.keys() :
			for a in self.availables[t]['actions'] :
				if not a in self.allActions :
					self.allActions.append(a)

		self.settings = QSettings()
		self.readSettings()
		
		self.pList.setSorting(0)
		self.pList_2.setSorting(0)
		self.pList_3.setSorting(0)
		
		self.programsAtQueue = {}
		self.programsOnRun = {}
		self.runningModules = {}
		
		self.loggers = RunningWindow(self.queueToggleShowRunWindowAction.setOn)
		self.loadPreviousQueue()
		self.prepareLoggersWindow()
		self.enableOrDisableQueueActions()
		
		self.genericEditor = GenericEditor(modal=1)
		self.initialized = True
	
	def prepareLoggersWindow(self) :
		self.cmdDict = {}
		self.cmdDict["Compilation"] =  r"((Compile(?! -B))|(CreatePackage))"
		self.cmdDict["Download"]    =  r"((InstallPackage -I)|(Compile -B))"
		self.cmdDict["Other"]       =  '('+self.cmdDict["Compilation"] + '|' + self.cmdDict["Download"] + ')'
		
		self.threasNumberDict = {}
		self.threasNumberDict["Compilation"] =  self.configWindow.threadsCPU.value()
		self.threasNumberDict["Download"]    =  self.configWindow.threadsBandwidth.value()
		self.threasNumberDict["Other"]       =  self.configWindow.threadsOther.value()
		
		t = self.cmdDict.keys()
		t.sort()
		
		for cmdType in t :
			for i in range(self.threasNumberDict[cmdType]) :
				name = cmdType + '-' + str(i+1)
				self.runningModules[name] = {}
				self.runningModules[name]["name"] = name
				self.runningModules[name]["logger"] = Logger(name, self.loggers)
				self.runningModules[name]["commands"] = self.cmdDict[cmdType]
				self.runningModules[name]["inverse_regex"] = (cmdType == "Other")
				self.runningModules[name]["running"]  = False
	
	def updateLoggersWindow(self) :
		self.threasNumberDict = {}
		self.threasNumberDict["Compilation"] =  self.configWindow.threadsCPU.value()
		self.threasNumberDict["Download"]    =  self.configWindow.threadsBandwidth.value()
		self.threasNumberDict["Other"]       =  self.configWindow.threadsOther.value()
		
		for name in self.runningModules.keys() :
			t = name.split('-')[0]
			n = int(name.split('-')[1])
			if self.threasNumberDict[t] < n :
				self.runningModules[name]["logger"].remove()
				del self.runningModules[name]
						
		t = self.cmdDict.keys()
		t.sort()
		for cmdType in t :
			for i in range(self.threasNumberDict[cmdType]) :
				name = cmdType + '-' + str(i+1)
				if not self.runningModules.has_key(name) or not self.runningModules[name] :
					self.runningModules[name] = {}
					self.runningModules[name]["name"] = name
					self.runningModules[name]["logger"] = Logger(name, self.loggers)
					self.runningModules[name]["commands"] = self.cmdDict[cmdType]
					self.runningModules[name]["inverse_regex"] = (cmdType == "Other")
					self.runningModules[name]["running"]  = False
	
	
	def doUpdateCache(self) : #
		for t in self.availables.keys() :
			self.availables[t]['programs'] = {}
		self.getAvailableWrapper(True)
		
	def getCurrentList(self) :
		if self.modeTab.currentPageIndex() == 1 :
			pList = self.pList_2
		elif self.modeTab.currentPageIndex() == 2 :
			pList = self.pList_3
		else :
			pList = self.pList
		return pList
			
	def getTypeOf(self, item) :
		if not item or not item.pixmap(0) :
			return ''
		serial = item.pixmap(0).serialNumber()
		for t in self.availables.keys() :
			if self.availables[t]['pixmap'] and self.availables[t]['actions'] and serial == self.availables[t]['pixmap'].serialNumber() :
				return t
		if serial in [ currentVersionPixmap.serialNumber(), unlinkedVersionPixmap.serialNumber(), otherVersionPixmap.serialNumber() ] :
			return 'installed'
		else :
			return ''
	
	def getValidActions(self) :
		tuples = self.getSelectedTuples()
		if not tuples :
			return []

		# list copying
		selectedActions = self.allActions[:]
		for p,v,r,t in tuples :
			if not selectedActions or not t:
				return

			if t == 'installed' :
				l = self.installedProgramActions
			else :
				# quick hack: only tracked that already have recipes can be 'NewVersioned'
				if t != 'tracked' or self.availables['recipe']['programs'].has_key(p) :
					l = self.availables[t]['actions']
				else :
					l = []
			
			toRemove = []
			for i in selectedActions :
				if not i in l :
					toRemove.append(i)
			for i in toRemove :
				selectedActions.remove(i)
		
		return selectedActions
	
	
	def showProgramsMenu(self, item, point) :
		selectedActions = self.getValidActions()
		if not selectedActions :
			return
		menu = QPopupMenu(self)
		for action in selectedActions:
			action.addTo(menu)
		menu.popup(point)

	def updateIfNeeded(self) :
		if not self.initialized :
			return
		
		if self.needToUpdateInstalled :
			temp = GetInstalled(detectUnlinked=self.detectUnlinkedAction.isOn(), callback=graphicalProgressHook)
			if temp or not self.installed :
				self.installed = temp
			self.needToUpdateInstalled = 0

		if self.needToUpdateAvailables :
			for t in self.availables.keys() :
				self.availables[t]['programs'] = {}
			self.getAvailableWrapper()
			self.needToUpdateAvailables = 0

	def showVisualTree(self) :
		pList = self.getCurrentList()
			
		before = int(pList.contentsY())
		pList.clear()

		programs = caseinsensitive_sort(self.visualTree.keys())
		programs.reverse()
		for p in programs :
			pp = QListViewItem(pList, p)
			pp.setPixmap(0, openProgramPixmap)
			pp.setSelectable(False)
			pList.insertItem(pp)
			pp.setOpen(1)
			x = pp
			versions = GuessLatest(self.visualTree[p],returnList=1)
			versions.reverse()
			for (v,pixmap) in versions :
				vv = QListViewItem(pList, v)
				vv.setPixmap(0, pixmap)
				x.insertItem(vv)

		pList.setContentsPos(0, before)

	#
	# Updates self.visualTree, that represents the items at package list 
	#
	def updateVisualTree(self) :
		self.visualTree = KeyInsensitiveDict()
		installed = self.installed
		for p in installed.keys() :
			if self.hideInstalledAction.isOn() :
				break
				
			versions  = installed[p]['versions']
			currents  = installed[p]['currents']
			unlinkeds = installed[p]['unlinkeds']
			
			if self.getMode() == 'duplicated' and len(versions) < 2 :
				continue

			latestInstalled = GuessLatest(versions)
			add = 0
			if self.getMode() == 'outdated' :
				all_versions = [latestInstalled]

				for t in self.availables.keys() :
					if self.availables[t]['show']() and self.availables[t]['programs'].has_key(p) :
						all_versions = all_versions + self.availables[t]['programs'][p].keys()

				if GuessLatest(all_versions) != latestInstalled :
					add = 1

			else :
				add = 1

			if add and self.applyFilter.isOn() :
				if p.lower().find(str(self.filterString.text()).lower()) == -1 :
					add = 0
					
			if add :
				if not self.visualTree.has_key(p) :
					self.visualTree[p] = []

				for v in versions :
					if v in unlinkeds :
						self.visualTree[p].append((v, unlinkedVersionPixmap))
					elif v in currents:
						self.visualTree[p].append((v, currentVersionPixmap))
					else :
						self.visualTree[p].append((v, otherVersionPixmap))

		added = map(string.lower, self.installed.keys())
		toAdd = []
		if self.getMode() == 'all' :
			for t in self.availables.keys() :
				if self.availables[t]['show']() : 
					l = [i for i in self.availables[t]['programs'].keys() if i.lower() not in added ]
					
					if self.applyFilter.isOn() :
						l = [i for i in l if i.lower().find(str(self.filterString.text()).lower()) > -1 ]
					
					added = added + map(string.lower, l)
					toAdd = toAdd + l

		if self.getMode() == 'duplicated' :
			return

		for p in toAdd + self.visualTree.keys() :
			if self.hideInstalledAction.isOn() and self.installed.has_key(p) :
				continue
			
			if not self.visualTree.has_key(p) :
				self.visualTree[p] = []

			for t in self.availables.keys() :
				if self.availables[t]['show']() and self.availables[t]['programs'].has_key(p) :
					if self.availables[t]['pixmap'] :
						v = GuessLatest(self.availables[t]['programs'][p].keys())
						r = GuessLatest(self.availables[t]['programs'][p][v].keys())
						
						if self.showOutdatedAvailableAction.isOn():
							for i in self.availables[t]['programs'][p].keys() :
								self.visualTree[p].append((i,self.availables[t]['pixmap'] ))
						
						elif not self.installed.has_key(p) :
							self.visualTree[p].append((Join_Version_Revision(v,r),self.availables[t]['pixmap']))
						
						elif GuessLatest([v, GuessLatest(self.installed[p]['versions'])]) != GuessLatest(self.installed[p]['versions']) :
							self.visualTree[p].append((Join_Version_Revision(v,r),self.availables[t]['pixmap']))

	def getTypeOfPixmap(self, px) :
		#TODO: complete this list
		for t in self.availables.keys() :
			if self.availables[t]['pixmap'].serialNumber() ==  px.serialNumber():
				return t
		return 'installed'
		
	def getSelectedTuples(self) :
		i = QListViewItemIterator(self.getCurrentList()) 
		l = []
		while True :
			c = i.current()
			if not c :
				break
			if c.isSelected() :
				try :
					p,v,r = (str(c.parent().text(0)),)+Split_Version_Revision(str(c.text(0)))
					l.append((p.strip(),v.strip(),r.strip(),self.getTypeOfPixmap(c.pixmap(0))))
				except :
					p,v,r = str(c.text(0)), '', ''
					l.append((p.strip(),v.strip(),r.strip(),self.getTypeOfPixmap(c.pixmap(0))))
			i += 1
		return l
	
	def getCurrentTuple(self) :
		c = self.getCurrentList().currentItem()
		try :
			select = c and (c.isSelected() or c.text(0) != self.getCurrentList().lastItem().parent().text(0))
		except :
			select = c
		if select :
			try :
				t = self.getTypeOfPixmap(c.pixmap(0))
			except :
				t = 'program'
			try :
				p,v,r = (str(c.parent().text(0)),)+Split_Version_Revision(str(c.text(0)))
				return p.strip(),v.strip(),r.strip(),t
			except :
				p,v,r = str(c.text(0)), '', ''
				return p.strip(),v.strip(),r.strip(),t
		else:
			return "","","",""

	def getMode(self) :
		if self.modeTab.currentPageIndex() == 1 :
			return 'outdated'
		elif self.modeTab.currentPageIndex() == 2 :
			return 'duplicated'
		else :
			return 'all'

	def adjustCommandsMenu(self) :
		selectedActions = self.getValidActions()
		for i in range(self.Actions.count()-1, 2, -1) :
			self.Actions.removeItemAt(i)
		if not selectedActions :
			return
		for action in selectedActions :
			action.addTo(self.Actions)
	
	def showCommandsQueueMenu(self, item, point) :
		self.Queue.popup(point)
	
	def listClicked(self, item) :
		if not item :
			return
		self.adjustCommandsMenu()
		self.description.clear()
		self.duDone = 0
		self.descriptionDone = 0

		p,v,r,t = self.getCurrentTuple()
	
		p = GuessProgramCase(p,v)
		if not p :
			p = str(item.text(0))
		
		infoTitle = p
		if v :
			infoTitle = infoTitle + ' ' + Join_Version_Revision(v,r)
		
		if t :
			T = string.capwords(string.replace(t, '_',' '))
			infoTitle = infoTitle + ' (' + T + ')'
		
		self.infoBox.setText(infoTitle)
		self.description.setText('Getting information...')
		qApp.processEvents()
		
		methods = []
		if True:
			def updateDescription(p,v,r,t) :
				description = DescribeProgram(p, Join_Version_Revision(v,r), mode = 'html', noweb = self.configWindow.noWeb.isChecked())
				if not description.strip() :
					return ''
					
				return description
				
			methods.append(updateDescription)
			
		if t in ['local_package', 'installed', 'official_package', 'contrib_package', 'recipe'] :
		#if t in ['local_package', 'installed', 'recipe'] :
			def updateDependencies(p,v,r,t) :
				if v :
					d = v
				else :
					d = 'Current'
				
				ret = ListDependencies(p,v,r,t, None, mode='html', report_missing=True, report_updating=True, recursive=False)
				if not ret.strip() :
					return ''
				return ret
				
			methods.append(updateDependencies)
			
		#if self.installed.has_key(p) :
			#def updateDependencies(p,v,t) :
				#if v :
					#d = v
				#else :
					#d = 'Current'
				#if os.access(goboPrograms+'/'+p+'/'+d+'/Resources/Dependencies', os.R_OK) :
					#add = '<p><font color="#000077"><b>['+'Dependencies'+'] </b></font><br>'
					
					#f = open(goboPrograms+'/'+p+'/'+d+'/Resources/Dependencies')
					#lines = f.readlines()
					#f.close()
					#for line in lines :
						#add = add + '<font color="#000000">'+line.strip()+'</font><br>'
					#if not lines :
						#add = add + '<font color="#000000">'+'-'+'</font><br>'
					#add = add + '</p>'
					#return add
				#return ''
				
			#methods.append(updateDependencies)
					
		if t == 'installed' :
			def updateSize(p,v,r,t) :
				try :
					x = os.popen('du -sh '+goboPrograms+'/'+p+'/'+v+' 2> /dev/null')
					size = x.read().split()[0]
					return '<p><font color="#000077"><b>['+'Unpacked size'+'] </b></font><br>'+str(size)+'</p>'
				except :
					pass
					return ''
		
			methods.append(updateSize)
		
		if t in ['official_package', 'contrib_package','local_package', 'recipe'] :
			def availability(p,v,r,t) :
				try :
					T = string.capwords(string.replace(t, '_', ' '))
					urls=string.join(self.availables[t]['programs'][p][v][r], '<br>')
					return '<p><font color="#000077"><b>['+T+' Availability]</b></font><br>'+urls+'</p>'
				except :
					return ''
				
			methods.append(availability)

		#if self.getSelectedType() in [''] :
			#def reverse_dependencies(p,vr,t) :
				#try :
					#x = os.popen('Dependencies --reverse '+p+' | cut -d\' \' -f 1 | sort -u').readlines()
					#xx = string.join(x,'<br>')
					#if xx.strip() :
						#return '<p><font color="#000077"><b>[Installed Programs Depending On '+p+']</b></font><br>'+xx+'</p>'
					#else :
						#return ''
				#except :
					#return ''
				
			#methods.append(reverse_dependencies)
		
		
		def updateStuff(methods, p,v,r,t) :
			s = ''
			for method in methods :
				s += method(p,v,r,t)
				qApp.postEvent(self, QCustomEvent(QEvent.User, (p,v,r,t,s)))
			
		import thread
		thread.start_new_thread(updateStuff, (methods, p,v,r,t))
		
	def customEvent(self, event) :
		import types
		data = event.data()
		if type(data[0]) == types.StringType :
			p,v,r,t,s   = event.data()
			pp,vv,rr,tt = self.getCurrentTuple()
			if pp.lower() == p.lower() and vv == v and rr == r and tt == t:
				self.description.setText(s)
		else :
			if data[1] != None :
				# please, someone tell me a better way to unpack a tuple in args:
				if type(data[1]) != types.TupleType or len(data[1]) == 1:
					data[0](data[1])
				elif len(data[1]) == 2 :
					data[0](data[1][0], data[1][1])
				elif len(data[1]) == 3 :
					data[0](data[1][0], data[1][1], data[1][2])
				elif len(data[1]) == 4 :
					data[0](data[1][0], data[1][1], data[1][2], data[1][3])
				elif len(data[1]) == 5 :
					data[0](data[1][0], data[1][1], data[1][2], data[1][3], data[1][4])
				elif len(data[1]) == 6 :
					data[0](data[1][0], data[1][1], data[1][2], data[1][3], data[1][4], data[1][5])
			else :
				data[0]()
	
	def helpAbout(self) :
		QMessageBox.about(self, 'About', 'Manager(C) 2004-2006 Andre Detsch.\nReleased under the GNU GPL.')
			
	################################################################################################
	# Management commands
	################################################################################################
	def doUpdateDescriptions(self) :
		cmd = 'DescribeProgram --update-all'
		self.do([cmd], [ None ])
	
	def doRemoveSystemBroken(self) :
		cmds = [ 'find '+goboLinks+' | RemoveBroken', 'find '+goboSettings+' | RemoveBroken' ]
		self.do(cmds, [ None ])
	
	def doNewVersion(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			assert p and v and t
			if t == 'tracked' :
				cmds.append('NewVersion '+p+' '+v)
				apps.append(p)
			elif t == 'recipe' :
				(vv, ok) = QInputDialog.getText('New version', 'Enter new version number for '+p,  QLineEdit.Normal, v)
				if ok :
					cmds.append('NewVersion '+p+' '+str(vv))
					apps.append(p)
			else :
				assert False
		self.do(cmds, apps)

	def doNewVersionAndCompile(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			assert p and v
			cmds.append('NewVersion '+p+' '+v+' && '+' nice Compile '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)
	
	
	def addCommandsForDependencies(self, p,v,r,t,u, cmds,apps, justDownload) :
		if self.configWindow.allwaysUpdate.isChecked() :
			mode='updating'
		else :
			mode='missing'
		deps,sols = CheckDependencies(p,v,r,t,u, ['local_package', 'official_package', 'recipe'], mode=mode, ask_hook=gui_ask_if_install, hook=updateOnlyHook, add_self='never')
		tr = []
		for c in sols :
			pp,vv,rr,tt,uu = c
			if tt == 'recipe' :
				self.addCommandsForCompile(pp,vv,rr,tt,uu, cmds, apps, justDownload)
			elif tt in [ 'local_package', 'official_package', 'contrib_package' ] :
				self.addCommandsForInstallPackage(pp,vv,rr,tt,uu, cmds, apps, justDownload)
			else :
				assert(False)
	
	def addCommandsForInstallPackage(self, p,v,r,t,u, cmds, apps, justDownload=False) :
		if justDownload :
			cmds.append('InstallPackage -I '+u)
			apps.append(p)
		else :
			if not self.configWindow.dontSplitDownload.isChecked() and t in ['official_package', 'contrib_package'] :
				packageName = u[u.rfind('/')+1:]
				location = getGoboVariable('defaultLocalPackagesPaths', 'Scripts/GetAvailable.conf', True)[0]
				localpath = location+'/'+packageName
				cmds.append('InstallPackage -I '+u)
				apps.append(p)
				cmds.append('InstallPackage --no-dependencies '+localpath)
				apps.append(p)
			else :
				if t in ['official_package', 'contrib_package'] and self.configWindow.keepDownloadedPackages.isChecked() :
					add = ' --keep '
				else :
					add = ''
				cmds.append('InstallPackage --no-dependencies '+add+u)
				apps.append(p)

	def addCommandsForCompile(self, p,v,r,t,u, cmds, apps, justDownload=False) :
		if justDownload :
			cmds.append('Compile -B '+p+' '+Join_Version_Revision(v,r))
			apps.append(p)
		else :
			if self.configWindow.dontSplitDownload.isChecked() :
				cmds.append('nice Compile '+p+' '+Join_Version_Revision(v,r))
				apps.append(p)
			else :
				cmds.append('Compile -B '+p+' '+Join_Version_Revision(v,r))
				apps.append(p)
				cmds.append('nice Compile -W '+p+' '+Join_Version_Revision(v,r))
				apps.append(p)
	
	def doInstallPackage(self, justDownload = False) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			assert t in ['local_package', 'official_package', 'contrib_package']
			r = GuessLatest(self.availables[t]['programs'][p][v].keys())
			u = self.availables[t]['programs'][p][v][r][0]
			self.addCommandsForDependencies  (p,v,r,t,u, cmds, apps, justDownload)
			self.addCommandsForInstallPackage(p,v,r,t,u, cmds, apps, justDownload)
			
		self.do(cmds, apps)
		
	def doDownloadPackage(self) :
		self.doInstallPackage(True)
	
	def doCompileRecipe(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			assert p
			self.addCommandsForDependencies(p,v,r,'recipe',None, cmds, apps, False)
			self.addCommandsForCompile     (p,v,r,'recipe',None, cmds, apps, False)
		self.do(cmds, apps)
	
	def doFetchRecipe(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			assert p
			self.addCommandsForDependencies(p,v,r,'recipe',None, cmds, apps, True)
			self.addCommandsForCompile     (p,v,r,'recipe',None, cmds, apps, True)
		self.do(cmds, apps)

	def doDisableProgram(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			cmds.append('DisableProgram '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)

	def doRemoveProgram(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			assert p and v
			cmds.append('RemoveProgram '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)

	def doSymlinkProgram(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			cmds.append('SymlinkProgram '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)
	
	def doSymlinkProgramOverwrite(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			cmds.append('SymlinkProgram -c overwrite '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)
	
	def doEditRecipe(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			x = os.popen('GetRecipe %s'%self.availables['recipe']['programs'][p][v][r][0])
			localRecipe = x.read().strip() + '/Recipe'
			x.close()
			
			if localRecipe and os.path.isfile(localRecipe):
				f = open(localRecipe)
				self.genericEditor.textEdit.setText(f.read())
				self.genericEditor.setCaption(localRecipe)
				f.close()
				self.connect(self.genericEditor.okButton,SIGNAL("clicked()"),self.editRecipeOK)
				self.genericEditor.show()
				
	def editRecipeOK(self) :
		t = str(self.genericEditor.textEdit.text())
		f = open(str(self.genericEditor.caption()), 'w')
		f.write(t)
		f.close()
		
	def doCreatePackage(self) :
		cmds,apps = [],[]
		for p,v,r,t in self.getSelectedTuples() :
			if self.configWindow.useDefaultCreatePackageDirectory.isChecked():
				dest = str(self.configWindow.defaultCreatePackageDirectory.text())
			else :
				dest = str(QFileDialog.getExistingDirectory(None, self, 'name', 'caption', True, True))
	
			if not dest :
				return
			if not os.access(dest, os.W_OK) :
				os.makedirs(dest)
			# TODO (easy): parameter at CreatePackage for setting destination directory
			cmds.append('cd '+dest+'; CreatePackage '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)

	################################################################################################
	# Tasks execution
	################################################################################################
	
	def toggleShowRunWindow(self, pressed) :
		if pressed :
			self.loggers.show()
		else :
			self.loggers.hide()
	
	def playToggled(self, pressed) :
		if pressed :
			if self.commandsQueue.count() == 0:
				self.queueToggleRunningAction.setOn(False)
			else :
				self.queueToggleShowRunWindowAction.setOn(True)
				self.activateNotRunningModules()
		else :
			pass
			#self.stopRunning()
	
	def activateNotRunningModules(self) :
		for module in self.runningModules.keys() :
			if not self.runningModules[module]["running"] :
				started = self.runNextCommand(self.runningModules[module]["logger"], self.runningModules[module])
	
	def canThisModuleRunThisCommand(self, runningModule, cmd, blockedPrograms) :
		match = re.search(runningModule["commands"], cmd)
		
		p = self.programsAtQueue[cmd]
		# if the program is not blocked
		if p not in blockedPrograms and "<BLOCK>" not in blockedPrograms:
			# if the command fits the running module tasks group (e.g. Compilation)
			if match and not runningModule["inverse_regex"] or not match and runningModule["inverse_regex"] :
				if runningModule['name'][:len('Compilation')] != 'Compilation' : 
					return True
				else :
					# When dealing with compilation, all dependencies must have its order respected, 
					#  so we cannot compile x before y is x depends on y. Not true for binary packages.
					for pp in blockedPrograms :
						l = cmd.split() 
						v,r = Split_Version_Revision(l[-1]) # .* Compile .* <program> <version>
						if does_x_depend_on_y((p,v,r,'recipe',None), pp, ['recipe', 'local_package', 'official_package', 'contrib_package'], hook=updateOnlyHook) :
							return False
					return True
		return False
		
	
	def runNextCommand(self, logger, runningModule) :
		import re
		if self.commandsQueue.count() == 0 :
			runningModule["running"] = False
			return False
		
		blockedPrograms= self.programsOnRun.values()[:]
		
		#for each command at the queue
		for i in range(self.commandsQueue.count()) :
			cmd = str(self.commandsQueue.text(i))
			
			if self.canThisModuleRunThisCommand(runningModule, cmd, blockedPrograms) :
				current = runningModule['logger'].getFocusedTabName()
				if current[-2:] == " *": # ' *' marks a running module tab
					current = current[:-2]
				
				if not self.runningModules[current]['running'] :
					runningModule['logger'].setFocus()
				
				self.programsOnRun[cmd] = self.programsAtQueue[str(self.commandsQueue.text(i))]
				del(self.programsAtQueue[str(self.commandsQueue.text(i))])
				self.commandsQueue.removeItem(i)
				self.initiateCommandThread(cmd, logger, runningModule)
				runningModule["running"] = True
				self.enableOrDisableQueueActions()
				self.autoSaveQueue()
				return True
			else :
				blockedPrograms.append(self.programsAtQueue[cmd])
		
		runningModule["running"] = False
		return runningModule["running"]

	
	def do(self, cmds, apps = []) :
		if len(cmds) == 0 :
			return
			
		for cmd, app in zip(cmds,apps) :
			self.commandsQueue.insertItem(cmd)
			self.programsAtQueue[cmd] = app
		
		self.enableOrDisableQueueActions()
		self.autoSaveQueue()
		
		if self.queueToggleRunningAction.isOn() or self.autorunAction.isOn() :
			self.activateNotRunningModules()

	def initiateCommandThread(self, cmd, logger, cmdsRegex) :
		r = Runner(self, qApp, logger, cmd, cmdsRegex)
		r.start()
	
	def commandFinished(self, aborted, logger, cmd, runningModule) :
		if aborted or self.commandsQueue.count() == 0:
			if aborted :
				self.commandsQueue.insertItem(cmd)
			runningModule["running"] = False
			self.enableOrDisableQueueActions()
			self.rescan()
		
		self.programsAtQueue[cmd] = self.programsOnRun[cmd]
		del(self.programsOnRun[cmd])
		
		import thread
		if self.queueToggleRunningAction.isOn():
			found = self.runNextCommand(logger, runningModule)
			self.activateNotRunningModules()
		else :
			runningModule["running"] = False
		
		self.autoSaveQueue()
	
	def enableOrDisableQueueActions(self) :
		# Adjusting 4 variables that may interfer in enabling or disabling the actions:
		isSomethingRunning = False
		for name in self.runningModules.keys() :
			if self.runningModules[name]['running'] :
				isSomethingRunning = True
				break
		actionsWereEnabled = self.queueRemoveItemAction.isEnabled()
		isPlayPressed = self.queueToggleRunningAction.isOn()
		queueEmpty = (self.commandsQueue.count() == 0)
		
		# Enabling/disabling based on the above variables
		if isPlayPressed and (not isSomethingRunning and queueEmpty) :
			self.queueToggleRunningAction.setOn(False)
		
		if (queueEmpty and not isSomethingRunning) and actionsWereEnabled :
			enable = False
		elif (not queueEmpty or isSomethingRunning) and not actionsWereEnabled :
			enable = True
		else :
			return
		
		for action in [ self.queueEditCommandAction, self.queueSaveQueueAction, self.queueToggleRunningAction, self.queueRemoveItemAction, self.queueClearQueueAction] :
			action.setEnabled(enable)
	
	def closeEvent(self, e) :
		self.saveSettings(False)
		isSomethingRunning = False
		for name in self.runningModules.keys() :
			if self.runningModules[name]['running'] :
				isSomethingRunning = True
				break
		accept = True
		if isSomethingRunning :
			accept = not QMessageBox.warning(self, "Manager", "There are commands running. \nReally exit?", "Yes", "No")
			
		if accept :
			e.accept()
	

progress = None
# to be used when calling default back-end functions
def graphicalProgressHook(label, i, n, showWhenChanged = True) :
	global progress
	qApp.lock()
	if not progress and label :
		progress = QProgressDialog(label, 'Abort', n)
		progress.forceShow()
	
	if showWhenChanged and str(progress.labelText()) != label and label :
		progress.setLabelText(label)
		progress.setTotalSteps(n)
		progress.forceShow()
		
	if i != n and i >= progress.totalSteps() :
		progress.setTotalSteps(n)

	progress.setProgress(i)
	qApp.processEvents()
	ret = progress.wasCancelled()
	qApp.unlock()
	return ret

def updateOnlyHook(label=None, i=0, n=0, showWhenChanged = True) :
	qApp.lock()
	qApp.processEvents()
	qApp.unlock()


def gui_ask_if_install(match) :
	p,v,r,t,u=match
	global widget
	resp = QMessageBox.warning(widget, 'Dependencies checking', "Install %s %s %s or skip this dependency?"%(p,Join_Version_Revision(v,r),t), 'Install', 'Skip')
	return resp == 0

widget = ManagerUIImpl()
qApp.setMainWidget(widget)
widget.init()

widget.updateIfNeeded()
widget.refresh()
widget.modeTab.setCurrentPage(1)
widget.show()
qApp.exec_loop()
