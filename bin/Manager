#!/usr/bin/python

# GoboLinux Manager
#
#
# (C) 2004 Andre Detsch. Released under the GNU GPL.
#          detsch at gobolinux.org
#
# PyQT based front-end to easy the task of managing the installed packages
#

#############################################################################
# Changelog
#############################################################################
# 25/08/2004 - [detsch] - Removed GuessProgramCase usage, since it is called within backend Scripts
# 23/08/2004 - [detsch] - DescribeProgram moved to another script
# 23/08/2004 - [detsch] - Runner moved to another script (lib only)
# 19/07/2003 - [detsch] - GetAvailable and GetInstalled moved to proper scripts (libs)
# 31/05/2004 - [detsch] - First version
#

import string, os, os.path, sys, re, urllib, time

from ManagerUI         import *
from ManagerConfigForm import *
from ManagerRunner     import *

from GuessLatest       import GuessLatest

from GetInstalled      import KeyInsensitiveDict
from GetInstalled      import GetInstalled
from GetAvailable      import GetAvailable, getGoboVariable
from DescribeProgram   import DescribeProgram
from GuessProgramCase  import GuessProgramCase 

from PythonUtils import *
#from GraphicalTail import GraphicalTail
from LoggersWrapper import *


goboPrograms = getGoboVariable('goboPrograms')
goboShared   = getGoboVariable('goboShared')

goboSettings = getGoboVariable('goboSettings')
goboLinks    = getGoboVariable('goboLinks')

iconsDir = goboShared+"/Manager/icons/"

qApp = QApplication(sys.argv)

openProgramPixmap       = QPixmap(iconsDir+"/folder_open.png")
unistalledProgramPixmap = QPixmap(iconsDir+"/folder.png")
currentVersionPixmap    = QPixmap(iconsDir+"/folder_green.png")
unlinkedVersionPixmap   = QPixmap(iconsDir+"/folder_grey.png")
otherVersionPixmap      = QPixmap(iconsDir+"/folder.png")

recipeIcon         = 'contents.png'
localBinaryIcon    = 'ark_azul.png'
officialBinaryIcon = 'ark.png'
contribBinaryIcon  = 'ark_grey.png'
trackedIcon        = 'xmag.png'

class ManagerUIImpl(ManagerUI) :
	initialized = False
	
	def selectAllOfficialPackages(self) :
		self.selectAll(self.availables['official_package']['pixmap'])
	def selectAllLocalPackages(self) :
			self.selectAll(self.availables['local_package']['pixmap'])
	def selectAllContributedPackages(self) :
			self.selectAll(self.availables['contrib_package']['pixmap'])
	def selectAllTracked(self) :
			self.selectAll(self.availables['tracked']['pixmap'])
	def selectAllRecipes(self) :
			self.selectAll(self.availables['recipe']['pixmap'])
	def selectAllInstalledCurrent(self) :
			self.selectAll(currentVersionPixmap)
	def selectAllInstalledOther(self) :
			self.selectAll(otherVersionPixmap)
	def selectAllInstalledUnlinked(self) :
			self.selectAll(unlinkedVersionPixmap)
	def selectAllPrograms(self) :
			self.selectAll(openProgramPixmap)

	def selectAll(self, icon) :
		pList = self.getCurrentList()
		i = QListViewItemIterator(pList) 
		while True :
			c = i.current()
			if not c :
				break
			if c.pixmap(0).serialNumber() == icon.serialNumber() :
				c.setSelected(True)
				c.repaint()
			i += 1
		
	def rescan(self) :
		self.forceAvailablesRescan(False)
		self.forceInstalledRescan(False)
		
		self.refresh()
		
	def forceAvailablesRescan(self, refresh=True) :
		self.needToUpdateAvailables = 1
		self.updateIfNeeded()
		if refresh :
			self.refresh()
	
	def forceInstalledRescan(self, refresh=True) :
		self.needToUpdateInstalled = 1
		self.updateIfNeeded()
		if refresh :
			self.refresh()

	def refreshIfFiltering(self) :
		if self.applyFilter.isOn() :
			self.refresh()
		
	def refresh(self) : #
		(p,v) = self.getLeftProgramAndVersion()
		self.updateVisualTree()
		self.showVisualTree()
		if p :
			item = self.getCurrentList().findItem(p, 0)
			if item :
				self.getCurrentList().ensureItemVisible(item)
			else :
				self.pList.ensureVisible(0, 0)
				self.pList_2.ensureVisible(0, 0)
				self.pList_3.ensureVisible(0, 0)
		else :
			self.pList.ensureVisible(0, 0)
			self.pList_2.ensureVisible(0, 0)
			self.pList_3.ensureVisible(0, 0)
	
	def deleteCommand(self) : #
		try :
			del(self.programsAtQueue[str(self.commandsQueue.text(self.commandsQueue.currentItem()))])
		except :
			pass
		self.commandsQueue.removeItem(self.commandsQueue.currentItem())
		self.enableOrDisableQueueActions()
	
	def clearCommands(self) : #
		self.commandsQueue.clear()
		self.enableOrDisableQueueActions()
		
	def saveCommands(self) : #
		filename = QFileDialog.getSaveFileName()
		
		if not filename :
			return
		filename = str(filename)
		cmds = []
		for i in range(self.commandsQueue.count()) :
			cmds.append(str(self.commandsQueue.text(i)))
		
		if os.access(filename, os.F_OK) :
			resp = QMessageBox.warning(self, 'Save commands', 'File '+filename+' exists.\nOverwrite?', 'Yes', 'No')
			if resp != 0:
				return
		
		f = open(filename, 'w')
		for cmd in cmds :
			f.write(cmd+' #'+ self.programsAtQueue[cmd] +'\n')
		f.close()
		
	def openCommands(self) : #
		filename =  QFileDialog.getOpenFileName()
		if not filename :
			return
		filename = str(filename)
		
		cmds = []
		f = open(filename)
		for cmd in f.readlines() :
			cmds.append(cmd.strip())
		
		if not os.access(filename, os.R_OK) :
			resp = QMessageBox.warning(self, 'Open commands', 'File '+filename+' not found.', 'Ok')
		
		self.commandsQueue.clear()
		for cmd in cmds :
			if cmd.find('#') > -1 :
  				self.programsAtQueue[cmd.split('#')[0]] = cmd.split('#')[1]
				self.commandsQueue.insertItem(cmd.split('#')[0])
			else :
				self.programsAtQueue[cmd] = "<BLOCK>"
				self.commandsQueue.insertItem(cmd)
		self.enableOrDisableQueueActions()
	
	def editCommandAtQueue(self, item = None) :
		if not item :
			item = self.commandsQueue.selectedItem()
			if not item :
				return
		
		old = str(item.text())
		(new, ok) = QInputDialog.getText('Edit command', '',  QLineEdit.Normal, old)
		if ok :
			i = self.commandsQueue.index(item)
			self.commandsQueue.removeItem(i)
			self.commandsQueue.insertItem(str(new), i)

	def showConfigurationWindow(self) : #
		self.connect(self.configWindow.okButton,SIGNAL("clicked()"),self.saveSettings)
		self.connect(self.configWindow.cancelButton,SIGNAL("clicked()"),self.readSettings)
		self.configWindow.show()
	
	def writeSetting(self, widget) :
		t = str(widget).split()[0][1:]
		n = widget.name()
		if t == 'qt.QLineEdit' :
			self.settings.writeEntry('/options/Manager/'+n, widget.text())
		elif t == 'qt.QCheckBox' :
			self.settings.writeEntry('/options/Manager/'+n, widget.isChecked())
		elif t == 'qt.QAction' :
			self.settings.writeEntry('/options/Manager/'+n, widget.isOn())
		elif t == 'qt.QSpinBox' :
			self.settings.writeEntry('/options/Manager/'+n, widget.value())
		else :
			print 'Invalid type:',widget

	def readSetting(self, widget, default = False) :
		t = str(widget).split()[0][1:]
		n = widget.name()
		if t == 'qt.QLineEdit' :
			if not default :
				default = ''
			widget.setText(self.settings.readEntry('/options/Manager/'+n, default)[0])
		elif t == 'qt.QCheckBox' :
			widget.setChecked(self.settings.readBoolEntry('/options/Manager/'+n, default)[0])
		elif t == 'qt.QAction' :
			widget.setOn(self.settings.readBoolEntry('/options/Manager/'+n, default)[0])
		elif t == 'qt.QSpinBox' :
			widget.setValue(self.settings.readNumEntry('/options/Manager/'+n, default)[0])
		else :
			print 'Invalid type:',widget
	
	def resetSetting(self, widget, default = False) :
		t = str(widget).split()[0][1:]
		n = widget.name()
		if t == 'qt.QLineEdit' :
			if not default :
				default = ''
			widget.setText(default)
		elif t == 'qt.QCheckBox' :
			widget.setChecked(default)
		elif t == 'qt.QAction' :
			widget.setOn(default)
		elif t == 'qt.QSpinBox' :
			widget.setValue(default)
		else :
			print 'Invalid type:',widget
		
	def getSettings(self) :
		return [
		(self.configWindow.doNotAskForConfirmation,          False),
		(self.configWindow.useDefaultCreatePackageDirectory, False),
		(self.configWindow.defaultCreatePackageDirectory,    '/Depot/Packages'),
		(self.configWindow.splitDownload,                    False),
		(self.configWindow.keepDownloadedPackages,           False),
		(self.configWindow.useCompatibilityModeInteraction,  False),
		(self.configWindow.noWeb,                            False),
		(self.configWindow.threadsBandwidth,                 1),
		(self.configWindow.threadsCPU,                       1),
		(self.configWindow.threadsOther,                     1),
		(self.autorunAction,                                 False),
		(self.detectUnlinkedAction,                          False)
		]
		
	def saveSettings(self) : #
		for item, default in self.getSettings():
			self.writeSetting(item)
		self.forceAvailablesRescan()
		
	def readSettings(self) : #
		for item, default in self.getSettings():
			self.readSetting(item, default)
	
	def resetSettings(self) :
		for item, default in self.getSettings():
			self.resetSetting(item, default)
		self.forceAvailablesRescan()
		
	def getAvailableWrapper(self, forceUpdate = False) :
		return GetAvailable(['local_package', 'official_package', 'recipe', 'contrib_package', 'tracked'], None, forceUpdate, graphicalProgressHook, self.availables, accessWeb = (not self.configWindow.noWeb.isChecked()), doNotUpdate = (self.availables != None))
		
	def init(self) :
		self.vSplit.setSizes([240, 400])
		self.hSplit.setSizes([400, 200])
	
		self.pList.header().hide()
		self.pList_2.header().hide()
		self.pList_3.header().hide()
		
		self.configWindow = ManagerConfigForm(modal=1)
		
		self.installed = {}
		
		self.needToUpdateInstalled  = 1
		self.needToUpdateAvailables = 0
		self.running  = False
		#self.mustStop = False
		
		self.multimode = 1

		self.installedProgramActions = [self.symlinkProgramAction, self.symlinkProgramOverwriteAction, self.removeProgramAction, self.disableProgramAction, self.createPackageAction]
		
		self.visualTree = None
		
		self.availables = None
		self.availables = self.getAvailableWrapper()

		self.availables['local_package']['pixmap']     = QPixmap(iconsDir+'/'+localBinaryIcon)
		self.availables['local_package']['show']       = self.show_local_package.isOn 
		self.availables['local_package']['actions']    = [self.installPackageAction]
		self.availables['local_package']['selectable'] = self.localpackageSelectable.isOn 
		
		self.availables['official_package']['pixmap']     = QPixmap(iconsDir+'/'+officialBinaryIcon)
		self.availables['official_package']['show']       = self.show_official_package.isOn
		self.availables['official_package']['actions']    = [self.installPackageAction, self.downloadPackageAction]
		self.availables['official_package']['selectable'] = self.officialpackageSelectable.isOn 
		
		self.availables['contrib_package']['pixmap']     = QPixmap(iconsDir+'/'+contribBinaryIcon)
		self.availables['contrib_package']['show']       = self.show_contrib_package.isOn 
		self.availables['contrib_package']['actions']    = [self.installPackageAction,self.downloadPackageAction]
		self.availables['contrib_package']['selectable'] = self.contributedpackageSelectable.isOn 
		
		self.availables['recipe']['pixmap']   = QPixmap(iconsDir+'/'+recipeIcon)
		self.availables['recipe']['show']     = self.show_recipe.isOn 
		self.availables['recipe']['actions']  = [self.compileRecipeAction, self.fetchRecipeAction, self.newVersionAction, self.doEditRecipeAction]
		self.availables['recipe']['selectable'] = self.recipeSelectable.isOn 
		
		self.availables['tracked']['pixmap']  = QPixmap(iconsDir+'/'+trackedIcon)
		self.availables['tracked']['show']    = self.show_tracked.isOn 
		self.availables['tracked']['actions'] = [self.newVersionAction] #, self.newVersionAndCompileAction]
		self.availables['tracked']['selectable'] = self.trackedSelectable.isOn 
		
		self.allActions = self.installedProgramActions[:]
		for t in self.availables.keys() :
			for a in self.availables[t]['actions'] :
				if not a in self.allActions :
					self.allActions.append(a)

		self.settings = QSettings()
		self.readSettings()
		self.pList.setSorting(0)
		self.pList_2.setSorting(0)
		self.pList_3.setSorting(0)
		
		self.programsAtQueue = {}
		self.programsOnRun = {}
		
		self.loggers = LoggersWrapper(self.queueToggleShowRunWindowAction.setOn)
		
		if self.multimode :
			self.runningModules = {}
			
			# warning, the folowing lines sets are strongly corelated...
			self.cmdDict = {}
			self.cmdDict["CPU"]       =  r"((Compile(?! -B))|(CreatePackage))"
			self.cmdDict["Bandwidth"] =  r"((InstallPackage -I)|(Compile -B))"
			self.cmdDict["Other"]     =  '('+self.cmdDict["CPU"] + '|' + self.cmdDict["Bandwidth"] + ')'
			
			self.threasNumberDict = {}
			self.threasNumberDict["CPU"]       =  self.configWindow.threadsCPU.value()
			self.threasNumberDict["Bandwidth"] =  self.configWindow.threadsBandwidth.value()
			self.threasNumberDict["Other"]     =  self.configWindow.threadsOther.value()
			
			for cmdType in self.cmdDict.keys() :
				for i in range(self.threasNumberDict[cmdType]) :
					name = cmdType + '-' + str(i+1)
					self.runningModules[name] = {}
					self.runningModules[name]["name"] = name
					self.runningModules[name]["logger"] = Logger(name, self.loggers)
					self.runningModules[name]["commands"] = self.cmdDict[cmdType]
					self.runningModules[name]["inverse_regex"] = (cmdType == "Other")
					self.runningModules[name]["running"]  = False
				
		self.enableOrDisableQueueActions()
		self.initialized = True
		
	def doUpdateCache(self) : #
		for t in self.availables.keys() :
			self.availables[t]['programs'] = {}
		self.getAvailableWrapper(True)
		
	def getCurrentList(self) :
		if self.modeTab.currentPageIndex() == 1 :
			pList = self.pList_2
		elif self.modeTab.currentPageIndex() == 2 :
			pList = self.pList_3
		else :
			pList = self.pList
		return pList
		
	def getSelectedTypes(self) :
		i = QListViewItemIterator(self.getCurrentList()) 
		l = []
		while True :
			c = i.current()
			if not c :
				break
			if c.isSelected() :
				l.append(self.getTypeOf(c))
			i += 1
		return l
	
	def getTypeOf(self, item) :
		if not item or not item.pixmap(0) :
			return ''
		serial = item.pixmap(0).serialNumber()
		for t in self.availables.keys() :
			if self.availables[t]['pixmap'] and self.availables[t]['actions'] and serial == self.availables[t]['pixmap'].serialNumber() :
				return t
		if serial in [ currentVersionPixmap.serialNumber(), unlinkedVersionPixmap.serialNumber(), otherVersionPixmap.serialNumber() ] :
			return 'installed'
		else :
			return ''
	
	def getSelectedType(self) :
		tr = self.getTypeOf(self.getCurrentList().currentItem())
		return tr
		
	def getValidActions(self) :
		pvs = self.getSelectedProgramsAndVersions()
		types = self.getSelectedTypes()
		
		if not types :
			return []
		assert pvs
		# list copying 
		selectedActions = self.allActions[:]
		
		for ((p,v),t) in zip(pvs,types) :
			if not selectedActions or not t:
				return

			if t == 'installed' :
				l = self.installedProgramActions
			else :
				# quick hack: only tracked that already have recipes can be 'NewVersioned'
				if t != 'tracked' or self.availables['recipe']['programs'].has_key(p) :
					l = self.availables[t]['actions']
				else :
					l = []
			
			toRemove = []
			
			for i in selectedActions :
				if not i in l :
					toRemove.append(i)
			
			for i in toRemove :
				selectedActions.remove(i)
		return selectedActions
	
	
	def showProgramsMenu(self, item, point) :
		selectedActions = self.getValidActions()
		
		if not selectedActions :
			return
			
		menu = QPopupMenu(self)
		
		for action in selectedActions:
			action.addTo(menu)
		menu.popup(point)

	def updateIfNeeded(self) :
		if not self.initialized :
			return
		
		if self.needToUpdateInstalled :
			temp = GetInstalled(goboPrograms, self.detectUnlinkedAction.isOn(), graphicalProgressHook)
			if temp or not self.installed :
				self.installed = temp
			self.needToUpdateInstalled = 0

		if self.needToUpdateAvailables :
			for t in self.availables.keys() :
				self.availables[t]['programs'] = {}
			self.getAvailableWrapper()
			self.needToUpdateAvailables = 0

	def showVisualTree(self) :
		pList = self.getCurrentList()
			
		before = int(pList.contentsY())
		pList.clear()

		programs = caseinsensitive_sort(self.visualTree.keys())
		programs.reverse()
		for p in programs :
			pp = QListViewItem(pList, p)
			pp.setPixmap(0, openProgramPixmap)
			pp.setSelectable(self.programSelectable.isOn())
			pList.insertItem(pp)
			pp.setOpen(1)
			x = pp
			versions = GuessLatest(self.visualTree[p],returnList=1)
			versions.reverse()
			for (v,pixmap,selectable) in versions :
				vv = QListViewItem(pList, v)
				vv.setPixmap(0, pixmap)
				vv.setSelectable(selectable)
				x.insertItem(vv)

		pList.setContentsPos(0, before)

	#
	# Updates self.visualTree, that represents the items at package list 
	#
	def updateVisualTree(self) :
		self.visualTree = KeyInsensitiveDict()

		installed = self.installed

		for p in installed.keys() :
			if self.hideInstalledAction.isOn() :
				break
				
			versions  = installed[p]['versions']
			currents  = installed[p]['currents']
			unlinkeds = installed[p]['unlinkeds']
			
			if self.getMode() == 'duplicated' and len(versions) < 2 :
				continue

			latestInstalled = GuessLatest(versions)
			add = 0
			if self.getMode() == 'outdated' :
				all_versions = [latestInstalled]

				for t in self.availables.keys() :
					if self.availables[t]['show']() and self.availables[t]['programs'].has_key(p) :
						all_versions = all_versions + self.availables[t]['programs'][p].keys()

				if GuessLatest(all_versions) != latestInstalled :
					add = 1

			else :
				add = 1

			if add and self.applyFilter.isOn() :
				if p.lower().find(str(self.filterString.text()).lower()) == -1 :
					add = 0
					
			if add :
				if not self.visualTree.has_key(p) :
					self.visualTree[p] = []

				for v in versions :
					if v in unlinkeds :
						self.visualTree[p].append((v, unlinkedVersionPixmap, self.installedUnlinkedSelectable.isOn()))
					elif v in currents:
						self.visualTree[p].append((v, currentVersionPixmap, self.installedCurrentSelectable.isOn()))
					else :
						self.visualTree[p].append((v, otherVersionPixmap, self.installedOtherSelectable.isOn()))

		added = map(string.lower, self.installed.keys())
		toAdd = []
		if self.getMode() == 'all' :
			for t in self.availables.keys() :
				if self.availables[t]['show']() : 
					l = [i for i in self.availables[t]['programs'].keys() if i.lower() not in added ]
					
					if self.applyFilter.isOn() :
						l = [i for i in l if i.lower().find(str(self.filterString.text()).lower()) > -1 ]
					
					added = added + map(string.lower, l)
					toAdd = toAdd + l

		if self.getMode() == 'duplicated' :
			return

		for p in toAdd + self.visualTree.keys() :
			if self.hideInstalledAction.isOn() and self.installed.has_key(p) :
				continue
			
			if not self.visualTree.has_key(p) :
				self.visualTree[p] = []

			for t in self.availables.keys() :
				if self.availables[t]['show']() and self.availables[t]['programs'].has_key(p) :
					if self.availables[t]['pixmap'] :
						v = GuessLatest(self.availables[t]['programs'][p].keys())
						
						if self.showOutdatedAvailableAction.isOn():
							for i in self.availables[t]['programs'][p].keys() :
								self.visualTree[p].append((i,self.availables[t]['pixmap'], self.availables[t]['selectable']()))
						
						elif not self.installed.has_key(p) :
							self.visualTree[p].append((v,self.availables[t]['pixmap'], self.availables[t]['selectable']()))
						
						elif GuessLatest([v, GuessLatest(self.installed[p]['versions'])]) != GuessLatest(self.installed[p]['versions']) :
							self.visualTree[p].append((v,self.availables[t]['pixmap'], self.availables[t]['selectable']()))

	def getTypeOfPixmap(self, px) :
		#TODO: complete this list
		for t in self.availables.keys() :
			if self.availables[t]['pixmap'].serialNumber() ==  px.serialNumber():
				return t
		return 'installed'
		
			
	def getSelectedProgramsAndVersionsAndTypes(self) :
		i = QListViewItemIterator(self.getCurrentList()) 
		l = []
		while True :
			c = i.current()
			if not c :
				break
			if c.isSelected() :
				try :
					p,v = str(c.parent().text(0)),str(c.text(0))
					l.append((p.strip(),v.strip(),self.getTypeOfPixmap(c.pixmap(0))))
				except :
					p,v = str(c.text(0)), ''
					l.append((p.strip(),v.strip(),self.getTypeOfPixmap(c.pixmap(0))))
			i += 1
		return l
	
	def getSelectedProgramsAndVersions(self) :
		i = QListViewItemIterator(self.getCurrentList()) 
		l = []
		while True :
			c = i.current()
			if not c :
				break
			if c.isSelected() :
				try :
					p,v = str(c.parent().text(0)),str(c.text(0))
					l.append((p.strip(),v.strip()))
				except :
					p,v = str(c.text(0)), ''
					
					l.append((p.strip(),v.strip()))
			i += 1
		return l
			
	def getLeftProgramAndVersion(self) :
		c = self.getCurrentList().currentItem()
		
		try :
			select = c and (c.isSelected() or c.text(0) != self.getCurrentList().lastItem().parent().text(0) )
		except :
			select = c
		if select :
			try :
				p,v = str(c.parent().text(0)),str(c.text(0))
				return p.strip(),v.strip()
			except :
				p,v = str(c.text(0)), ''
				return p.strip(),v.strip()
		else:
			return "",""

	def adjustCommandsMenu(self) :
		selectedActions = self.getValidActions()
		
		for i in range(self.Actions.count()-1, 2, -1) :
			self.Actions.removeItemAt(i)
			
		if not selectedActions :
			return
		
		for action in selectedActions :
			action.addTo(self.Actions)
		
	
	def listClicked(self, item) :
		if not item :
			return
		self.adjustCommandsMenu()
		self.description.clear()
		self.duDone = 0
		self.descriptionDone = 0

		p, v = self.getLeftProgramAndVersion()
		p = GuessProgramCase(p,v)
		if not p :
			p = str(item.text(0))
		
		self.getSelectedProgramsAndVersions()
		
		infoTitle = p
		if v :
			infoTitle = infoTitle + ' ' + v
		t = self.getSelectedType()
		if t :
			T = string.capwords(string.replace(t, '_',' '))
			infoTitle = infoTitle + ' (' + T + ')'
		
		self.infoBox.setTitle(infoTitle)
		self.description.setText('Getting information...')
		qApp.processEvents()
		
		methods = []
		if True:
			def updateDescription(p,v,t) :
				description = DescribeProgram(p, v, mode = 'html', noweb = self.configWindow.noWeb.isChecked())
				if not description.strip() :
					return ''
					
				return description
				
			methods.append(updateDescription)
			
		if self.installed.has_key(p) :
			def updateDependencies(p,v,t) :
				if v :
					d = v
				else :
					d = 'Current'
				if os.access(goboPrograms+'/'+p+'/'+d+'/Resources/Dependencies', os.R_OK) :
					add = '<p><font color="#000077"><b>['+'Dependencies'+'] </b></font><br>'
					
					f = open(goboPrograms+'/'+p+'/'+d+'/Resources/Dependencies')
					lines = f.readlines()
					f.close()
					for line in lines :
						add = add + '<font color="#000000">'+line.strip()+'</font><br>'
					if not lines :
						add = add + '<font color="#000000">'+'-'+'</font><br>'
					add = add + '</p>'
					return add
				return ''
				
			methods.append(updateDependencies)
					
		if self.getSelectedType() == 'installed' :
			def updateSize(p,v,t) :
				try :
					x = os.popen('du -sh '+goboPrograms+'/'+p+'/'+v+' 2> /dev/null')
					size = x.read().split()[0]
					return '<p><font color="#000077"><b>['+'Unpacked size'+'] </b></font><br>'+str(size)+'</p>'
				except :
					pass
					return ''
		
			methods.append(updateSize)
		
		if self.getSelectedType() in ['official_package', 'contrib_package','local_package', 'recipe'] :
			def availability(p,v,t) :
				T = string.capwords(string.replace(t, '_',' '))
				return '<p><font color="#000077"><b>['+T+' Availability]</b></font><br>'+string.join(self.availables[t]['programs'][p][v],'<br>')+'</p>'
				
			methods.append(availability)
		
		def updateStuff(methods, p,v,t) :
			s = ''
			for method in methods :
				s += method(p,v,t)
				qApp.postEvent(self, QCustomEvent(QEvent.User, (p,v,s)))
			
		import thread
		thread.start_new_thread(updateStuff, (methods, p,v,self.getSelectedType()))
		
	def customEvent(self, event) :
		import types
		data = event.data()
		if type(data[0]) == types.StringType :
			p, v, s = event.data()
			(pp, vv) = self.getLeftProgramAndVersion()
			if pp.lower() == p.lower() and vv == v:
				self.description.setText(s)
		else :
			if data[1] != None :
				# please, someone tell me a better way to unpack a tuple in args:
				if type(data[1]) != types.TupleType or len(data[1]) == 1:
					data[0](data[1])
				elif len(data[1]) == 2 :
					data[0](data[1][0], data[1][1])
				elif len(data[1]) == 3 :
					data[0](data[1][0], data[1][1], data[1][2])
				elif len(data[1]) == 4 :
					data[0](data[1][0], data[1][1], data[1][2], data[1][3])
				elif len(data[1]) == 5 :
					data[0](data[1][0], data[1][1], data[1][2], data[1][3], data[1][4])
				elif len(data[1]) == 6 :
					data[0](data[1][0], data[1][1], data[1][2], data[1][3], data[1][4], data[1][5])
			else :
				data[0]()
	
	def getMode(self) :
		if self.modeTab.currentPageIndex() == 1 :
			return 'outdated'
		elif self.modeTab.currentPageIndex() == 2 :
			return 'duplicated'
		else :
			return 'all'
	
	# =========================================================================
	def doUpdateDescriptions(self) :
		cmd = 'DescribeProgram --update-all'
		self.do([cmd], [ None ])
	
	def doRemoveSystemBroken(self) :
		cmds = [ 'find '+goboLinks+' | RemoveBroken', 'find '+goboSettings+' | RemoveBroken' ]
		self.do(cmds, [ None ])
	
	def doNewVersion(self) :
		cmds = []
		apps = []
		for p, v, t in self.getSelectedProgramsAndVersionsAndTypes() :
			assert p and v and t
			if t == 'tracked' :
				cmds.append('NewVersion '+p+' '+v)
				apps.append(p)
			elif t == 'recipe' :
				(vv, ok) = QInputDialog.getText('New version', 'Enter new version number for '+p,  QLineEdit.Normal, v)
				if ok :
					cmds.append('NewVersion '+p+' '+str(vv))
					apps.append(p)
			else :
				assert False
		self.do(cmds, apps)

	def doNewVersionAndCompile(self) :
		cmds = []
		apps = []
		for p, v in self.getSelectedProgramsAndVersions() :
			assert p and v
			cmds.append('NewVersion '+p+' '+v+' && '+' nice Compile '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)
		
	def doInstallPackage(self, justDownload = False) :
		pvs = self.getSelectedProgramsAndVersions()
		types = self.getSelectedTypes()
		cmds = []
		apps = []
		
		for ((p,v),kind) in zip(pvs,types) :
			assert kind in ['local_package', 'official_package', 'contrib_package']
			
			path = self.availables[kind]['programs'][p][v][0]
			
			if justDownload :
				cmds.append('InstallPackage -I '+path)
				apps.append(p)
			else :
				if self.configWindow.splitDownload.isChecked() and kind in ['official_package', 'contrib_package'] :
					packageName = path[path.rfind('/')+1:]
					location = getGoboVariable('defaultLocalPackagesPaths', 'Scripts/GetAvailable.conf', True)[0]
					localpath = location+'/'+packageName
					
					cmds.append('InstallPackage -I '+path)
					apps.append(p)
					cmds.append('InstallPackage '+localpath)
					apps.append(p)
				else :
					if kind in ['official_package', 'contrib_package'] and self.configWindow.keepDownloadedPackages.isChecked() :
						add = ' --keep '
					else :
						add = ''
					cmds.append('InstallPackage '+add+path)
					apps.append(p)
			
		self.do(cmds, apps)
		
	def doDownloadPackage(self) :
		self.doInstallPackage(True)
	
	def doCompileRecipe(self) :
		cmds = []
		apps = []
		for p, v in self.getSelectedProgramsAndVersions() :
			assert p
			if self.configWindow.splitDownload.isChecked() :
					cmds.append('Compile -B '+p+' '+v)
					apps.append(p)
					cmds.append('nice Compile -W '+p+' '+v)
					apps.append(p)
			else :
				cmds.append('nice Compile '+p+' '+v)
				apps.append(p)
					
		self.do(cmds, apps)
	
	def doFetchRecipe(self) :
		cmds = []
		apps = []
		for p, v in self.getSelectedProgramsAndVersions() :
			assert p
			cmds.append('Compile -B '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)

	def doDisableProgram(self) :
		cmds = []
		apps = []
		for p, v in self.getSelectedProgramsAndVersions() :
			cmds.append('DisableProgram '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)

	def doRemoveProgram(self) :
		cmds = []
		apps = []
		for p, v in self.getSelectedProgramsAndVersions() :
			assert p and v
			cmds.append('RemoveProgram '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)

	def doSymlinkProgram(self) :
		cmds = []
		apps = []
		for p, v in self.getSelectedProgramsAndVersions() :
			cmds.append('SymlinkProgram '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)
	
	def doSymlinkProgramOverwrite(self) :
		cmds = []
		apps = []
		for p, v in self.getSelectedProgramsAndVersions() :
			cmds.append('SymlinkProgram -c overwrite '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)

	def doCreatePackage(self) :
		cmds = []
		apps = []
		for p, v in self.getSelectedProgramsAndVersions() :
			if self.configWindow.useDefaultCreatePackageDirectory.isChecked():
				dest = str(self.configWindow.defaultCreatePackageDirectory.text())
			else :
				dest = str(QFileDialog.getExistingDirectory ( None, self, 'name', 'caption', True, True))
	
			if not dest :
				return
			if not os.access(dest, os.W_OK) :
				os.makedirs(dest)
			# TODO (easy): parameter at CreatePackage for setting destination directory
			cmds.append('cd '+dest+'; CreatePackage '+p+' '+v)
			apps.append(p)
		self.do(cmds, apps)

	def do(self, cmds, apps = []) :
		if len(cmds) == 0 :
			return 
			
		for cmd, app in zip(cmds,apps) :
			self.commandsQueue.insertItem(cmd)
			self.programsAtQueue[cmd] = app
		
		self.enableOrDisableQueueActions()
		
		if self.running :
			self.activateNotRunningModules()
			
		if self.autorunAction.isOn() :
			self.startRunning()

	def playToggled(self, pressed) :
		if pressed :
			self.queueToggleShowRunWindowAction.setOn(True)
			somethingToDo = self.startRunning()
			if not somethingToDo:
				self.queueToggleRunningAction.setOn(False)
		else :
			self.stopRunning()
	
	def toggleShowRunWindow(self, pressed) :
		if pressed :
			self.loggers.show()
		else :
			self.loggers.hide()
	
	def initiateCommandThread(self, cmd, logger, cmdsRegex) :
		r = Runner(self, qApp, logger, cmd, cmdsRegex)
		r.start()

	def activateNotRunningModules(self) :
		if self.running :
			for module in self.runningModules.keys() :
				if not self.runningModules[module]["running"] :
					started = self.runNextCommand(self.runningModules[module]["logger"], self.runningModules[module])
					
	def runNextCommand(self, logger, runningModule) :
		import re
		if self.commandsQueue.count() == 0 :
			runningModule["running"] = False
			return False
		
		blockedPrograms= self.programsOnRun.values()[:]
		for i in range(self.commandsQueue.count()) :
			cmd = str(self.commandsQueue.text(i))
			match = re.search(runningModule["commands"], cmd)
			
			if self.programsAtQueue[cmd] not in blockedPrograms and "<BLOCK>" not in blockedPrograms:
				if match and not runningModule["inverse_regex"] or not match and runningModule["inverse_regex"] :
					current = runningModule['logger'].getFocusedTabName()
					if current[-2:] == " *":
						current = current[:-2]
					
					if not self.runningModules[current]['running'] :
						runningModule['logger'].setFocus()
					
					self.programsOnRun[cmd] = self.programsAtQueue[str(self.commandsQueue.text(i))]
					del(self.programsAtQueue[str(self.commandsQueue.text(i))])
					self.commandsQueue.removeItem(i)
					self.initiateCommandThread(cmd, logger, runningModule)
					runningModule["running"] = True
					self.enableOrDisableQueueActions()
					return True
				else :
					blockedPrograms.append(self.programsAtQueue[cmd])
		
		runningModule["running"] = False
		
		return runningModule["running"]


	def startRunning(self) :
		if not self.running and self.commandsQueue.count() == 0:
			return False
		
		if not self.running and self.commandsQueue.count() > 0:
			self.running = True
			self.mustStop = False
			self.activateNotRunningModules()
		else :
			self.mustStop = False
		return True
	
	def stopRunning(self) :
		#runner checks this attribute
		self.mustStop = True
	
	def setRunning(self, b) :
		self.running = b
	
	def helpAbout(self) :
		QMessageBox.about(self, 'About', 'Manager 1.1.0alpha\n(C) 2004-2005 Andre Detsch.\nReleased under the GNU GPL.')

	def commandFinished(self, aborted, logger, cmd, runningModule) :
		# TODO: replace command in queue if not sucessful
		if aborted or self.commandsQueue.count() == 0:
			if aborted :
				self.commandsQueue.insertItem(cmd)
				
			runningModule["running"] = False
			self.mustStop = True
			self.running = False
			self.enableOrDisableQueueActions()
		
		self.programsAtQueue[cmd] = self.programsOnRun[cmd]
		del(self.programsOnRun[cmd])
		
		import thread
		if not self.mustStop :
			found = self.runNextCommand(logger, runningModule)
			self.activateNotRunningModules()
	
 	def showCommandsQueueMenu(self, item, point) :
		self.Queue.popup(point)

	def enableOrDisableQueueActions(self) :
		queueEmpty = (self.commandsQueue.count() == 0)
		
		isSomethingRunning = False
		for name in self.runningModules.keys() :
			if self.runningModules[name]['running'] :
				isSomethingRunning = True
				break
			
		actionsWereEnabled = self.queueRemoveItemAction.isEnabled()
		
		isPlayPressed = self.queueToggleRunningAction.isOn()
		
		if isPlayPressed and (not isSomethingRunning and queueEmpty) :
			self.queueToggleRunningAction.setOn(False)
		
		if (queueEmpty and not isSomethingRunning) and actionsWereEnabled :
			enable = False
		
		elif (not queueEmpty or isSomethingRunning) and not actionsWereEnabled :
			enable = True
		
		else :
			return
		
		for action in [ self.queueEditCommandAction, self.queueSaveQueueAction, self.queueToggleRunningAction, self.queueRemoveItemAction, self.queueClearQueueAction] :
			action.setEnabled(enable)
	

progress = None
# to be used when calling default back-end functions
def graphicalProgressHook(label, i, n, showWhenChanged = True) :
	global progress
	qApp.lock()
	if not progress and label :
		progress = QProgressDialog(label, 'Abort', n)
		progress.forceShow()
	
	if showWhenChanged and str(progress.labelText()) != label and label :
		progress.setLabelText(label)
		progress.setTotalSteps(n)
		progress.forceShow()
		
	if i != n and i >= progress.totalSteps() :
		progress.setTotalSteps(n)

	progress.setProgress(i)
	qApp.processEvents()
	ret = progress.wasCancelled()
	qApp.unlock()
	return ret

widget = ManagerUIImpl()
qApp.setMainWidget(widget)
widget.init()

widget.updateIfNeeded()
widget.refresh()
widget.modeTab.setCurrentPage(1)
widget.show()
qApp.exec_loop()
