#!/bin/env python

# Manager Runner
#
#
# (C) 2004 Andre Detsch. Released under the GNU GPL.
#          detsch at gobolinux.org
#
# Class responsible of run commands ordered within Manager, and
#   talk with the backend scripts
#

#############################################################################
# Changelog
#############################################################################
#
# 23/08/2004 - [detsch] - forked from Manager
#
import sys
from threading import Thread
from select    import *
from tempfile  import *
from qt import *

import os, time, string, urllib, popen2, sys

from qt import *

class Logger :
	colors = [
		('\033[1;30m' , '<font color="#625D5D">'), # 'Gray'

		('\033[1;31m' , '<font color="#F62217">'), # 'BoldRed'
		('\033[0;31m' , '<font color="#770000">'), # 'Red0'
		('\033[31m'   , '<font color="#770000">'), # 'Red'

		('\033[1;32m' , '<font color="#347C17">'), # 'BoldGreen'
		('\033[0;32m' , '<font color="#4CC417">'), # 'Green0'
		('\033[32m'   , '<font color="#4CC417">'), # 'Green'

		('\033[1;33m' , '<font color="#FDD017">'), # 'BoldYellow'
		('\033[0;33m' , '<font color="#AF7817">'), # 'Yellow0'
		('\033[33m'   , '<font color="#AF7817">'), # 'Yellow'

		('\033[1;34m' , '<font color="#2554C7">'), # 'BoldBlue'
		('\033[0;34m' , '<font color="#342D7E">'), # 'Blue0'
		('\033[34m'   , '<font color="#342D7E">'), # 'Blue'

		('\033[1;35m' , '<font color="#777777">'), # 'BoldMagenta'
		('\033[0;35m' , '<font color="#C031C7">'), # 'Magenta0'
		('\033[35m'   , '<font color="#C031C7">'), # 'Magenta'

		('\033[1;36m' , '<font color="#43C6DB">'), # 'BoldCyan'
		('\033[0;36m' , '<font color="#4C7D7E">'), # 'Cyan0'
		('\033[36m'   , '<font color="#4C7D7E">'), # 'Cyan'

		('\033[1;37m' , '<font color="#000000">'), # 'BoldWhite'
		('\033[0;37m' , '<font color="#000000">'), # 'White0'
		('\033[37m'   , '<font color="#000000">'), # 'White'

		('\033[0m'    , '</font>'               ) # 'Normal'
	]

	def __init__(self, name, runWindow, availableGid = 0) :
		self.runWindow = runWindow
		self.name = name

		self.tab = QWidget(runWindow.tabWidget, name)
		tabLayout = QGridLayout(self.tab,1,1,11,6,"tabLayout")

		self.textWidget = QTextEdit(self.tab,"textWidget")
		self.textWidget.setReadOnly(1)
		tabLayout.addMultiCellWidget(self.textWidget,0,0,0,4)

		self.pauseButton = QPushButton(self.tab,"pauseButton")
		self.pauseButton.setEnabled(0)
		self.pauseButton.setDefault(1)
		tabLayout.addWidget(self.pauseButton,1,2)

		self.resumeButton = QPushButton(self.tab,"resumeButton")
		self.resumeButton.setEnabled(0)
		self.resumeButton.setDefault(1)
		tabLayout.addWidget(self.resumeButton,1,3)

		self.abortButton = QPushButton(self.tab,"abortButton")
		self.abortButton.setEnabled(0)
		self.abortButton.setDefault(1)
		tabLayout.addWidget(self.abortButton,1,4)

		self.autoScroll = QCheckBox(self.tab,"autoScroll")
		self.autoScroll.setChecked(1)

		tabLayout.addWidget(self.autoScroll,1,0)
		spacer = QSpacerItem(31,20,QSizePolicy.Expanding,QSizePolicy.Minimum)
		tabLayout.addItem(spacer,1,1)

		runWindow.tabWidget.insertTab(self.tab,QString(""))

		runWindow.connect(self.abortButton,SIGNAL("released()"),self.abortSubprocess)
		runWindow.connect(self.pauseButton,SIGNAL("released()"),self.pauseSubprocess)
		runWindow.connect(self.resumeButton,SIGNAL("released()"),self.resumeSubprocess)

		self.runWindow.tabWidget.changeTab(self.tab,self.name)
		self.initialize(availableGid)
		self.languageChange()

		self.disableActionButtons = True

		self.disableAllButtonsIfRequired()

	def disableAllButtonsIfRequired(self) :
		if self.disableActionButtons :
			self.abortButton.setEnabled(False)
			self.pauseButton.setEnabled(False)
			self.resumeButton.setEnabled(False)

	def remove(self) :
		self.runWindow.tabWidget.removePage(self.tab)

	def languageChange(self):
		self.autoScroll.setText("Force Auto scroll")
		self.abortButton.setText("&Abort")
		#self.abortButton.setAccel("Alt+A")
		self.pauseButton.setText("&Pause")
		#self.pauseButton.setAccel("Alt+P")
		self.resumeButton.setText("&Resume")
		#self.resumeButton.setAccel("Alt+R")

	output = None
	def initialize(self, availableGid = 0) :
		#self.output = open('/tmp/GoboLinuxInstall.log', 'w')
		self.abortOrdered = False
		self.subprocessPid = 0
		import random
		self.availableGid = int(random.random() * 1000)


	def enableOk(self) :
		self.subprocessPid = 0
		self.abortButton.setEnabled(False)
		self.pauseButton.setEnabled(False)
		self.resumeButton.setEnabled(False)

		self.disableAllButtonsIfRequired()


	def append(self, s) :
		self.runWindow.tabWidget.changeTab(self.tab,self.name+" *")
		#f = self.tab.font()
		#print f
		#f.setBold(True)
		#f = self.tab.setFont(f)

		# filtering some anoying lines
		if s.find('already defined in') > -1 or s.find('seems to be moved') > -1 :
			return

		vs = self.textWidget.verticalScrollBar()
		doScroll  = (vs.maxValue() <= vs.value())

		for terminal, html in Logger.colors :
			s = s.replace(terminal, html)
		self.textWidget.append(s)

		if self.autoScroll.isChecked() :
			self.textWidget.ensureVisible (0, 999999) # scroll down

	def insert(self, s) :
		qApp.lock()
		self.textWidget.insertAt(s, self.textWidget.paragraphs()-1, self.textWidget.paragraphLength(self.textWidget.paragraphs()-1))
		qApp.unlock()

	def abortSubprocess(self) :
		self.runWindow.tabWidget.changeTab(self.tab,self.name)
		self.abortOrdered = True

		if self.subprocessPid :
			# a small dirty hack to allow killing the subprocess group, without killing Manager itself
			#   signal.SIG_IGN -> ignores the signal
			#   signal.SIG_DFL -> signal default action
			# -----------------------------------
			import signal, os
			signal.signal(signal.SIGTERM, signal.SIG_IGN)

			#print 'GID is',os.getpgid(self.subprocessPid)

			os.setpgid(self.subprocessPid, self.availableGid)

			os.killpg(os.getpgid(self.subprocessPid), signal.SIGTERM)
			signal.signal(signal.SIGTERM, signal.SIG_DFL)
			# -----------------------------------

			self.subprocessPid = 0
			self.append('<font color="#F62217">Aborted by the user</font><br>')
			#self.okButton.setText("&Close")

			self.resumeButton.setEnabled(False)
			self.pauseButton.setEnabled(False)
			self.abortButton.setEnabled(False)

			self.disableAllButtonsIfRequired()


	def pauseSubprocess(self) :
		if self.subprocessPid :
			import signal, os
			signal.signal(signal.SIGTSTP, signal.SIG_IGN)
			#print 'GID is',os.getpgid(self.subprocessPid)
			#print 'S PID is',self.subprocessPid
			#os.setpgid(self.subprocessPid, 2)
			os.setpgid(self.subprocessPid, os.getpgid(self.subprocessPid))

			os.setpgid(self.subprocessPid, self.availableGid)

			os.killpg(os.getpgid(self.subprocessPid), signal.SIGTSTP)
			signal.signal(signal.SIGTSTP, signal.SIG_DFL)

			self.append('<font color="#F62217">Paused by the user</font><br>')
			self.resumeButton.setEnabled(True)
			self.pauseButton.setEnabled(True)
			self.abortButton.setEnabled(False)

	def resumeSubprocess(self) :
		if self.subprocessPid :
			import signal, os
			os.setpgid(self.subprocessPid, self.availableGid)
			os.killpg(os.getpgid(self.subprocessPid), signal.SIGCONT)

			self.append('<font color="#F62217">Resumed</font><br>')
			self.pauseButton.setEnabled(True)
			self.resumeButton.setEnabled(False)
			self.abortButton.setEnabled(True)

			self.disableAllButtonsIfRequired()

	def setFocus(self) :
		self.runWindow.tabWidget.setCurrentPage(self.runWindow.tabWidget.indexOf(self.tab))

	def getFocusedTabName(self) :
		return str(self.runWindow.tabWidget.label(self.runWindow.tabWidget.currentPageIndex()))

	def finished(self) :
		self.runWindow.tabWidget.changeTab(self.tab,self.name)
		self.subprocessPid = 0
		self.abortButton.setEnabled(False)
		self.pauseButton.setEnabled(False)
		self.resumeButton.setEnabled(False)

		self.disableAllButtonsIfRequired()

	def setSubprocessPid(self, pid) :
		self.subprocessPid = pid
		self.abortButton.setEnabled(True)
		self.pauseButton.setEnabled(True)
		self.resumeButton.setEnabled(False)

		self.disableAllButtonsIfRequired()

	def runWindow(self) :
		return self.runWindow


#class RunningWindowWithoutButtons(QDialog) :
	#def __init__(self, callOnClose = None):
		#QDialog.__init__(self)
		#self.setName("RunningWindow")
		#RunningWindowLayout = QGridLayout(self,1,1,11,6,"RunningWindow")
		#self.tabWidget = QTabWidget(self,"tabWidget")

		#RunningWindowLayout.addMultiCellWidget(self.tabWidget,0,0,0,1)
		#self.setCaption("GoboLinux Manager")
		#self.resize(QSize(561,484).expandedTo(self.minimumSizeHint()))
		#self.clearWState(Qt.WState_Polished)
		#self.callOnClose = callOnClose

	#def closeEvent(self, e) :
		#self.callOnClose(False)
		#e.accept()


class RunningWindowWithButtons(QDialog):
	def __init__(self,callOnClose = None):
		QDialog.__init__(self)
		self.setName("RunningWindow")
		Form1Layout = QGridLayout(self,1,1,11,6,"Form1Layout")
		self.tabWidget = QTabWidget(self,"tabWidget")

		Form1Layout.addMultiCellWidget(self.tabWidget,0,0,0,3)
		self.resumeAllButton = QPushButton(self,"Resume_All")
		self.resumeAllButton.setText("Resume All")
		Form1Layout.addWidget(self.resumeAllButton,1,1)
		self.pauseAllButton = QPushButton(self,"Pause_All")
		self.pauseAllButton.setText("Pause All")
		Form1Layout.addWidget(self.pauseAllButton,1,2)
		self.abortAllButton = QPushButton(self,"Abort_All")
		self.abortAllButton.setText("Abort All")
		Form1Layout.addWidget(self.abortAllButton,1,3)
		spacer1 = QSpacerItem(61,20,QSizePolicy.Expanding,QSizePolicy.Minimum)
		Form1Layout.addItem(spacer1,1,0)
		self.resize(QSize(600,480).expandedTo(self.minimumSizeHint()))
		self.clearWState(Qt.WState_Polished)

		self.connect(self.abortAllButton,SIGNAL("released()"),self.abortAll)
		self.connect(self.pauseAllButton,SIGNAL("released()"),self.pauseAll)
		self.connect(self.resumeAllButton,SIGNAL("released()"),self.resumeAll)

		self.callOnClose = callOnClose
		self.abortAllOrdered = False

	def closeEvent(self, e) :
		self.callOnClose(False)
		e.accept()

	def abortAll(self) :
		import signal, os
		gid = os.getgid()
		signal.signal(signal.SIGTERM, signal.SIG_IGN)
		os.killpg(gid, signal.SIGTERM)
		signal.signal(signal.SIGTERM, signal.SIG_DFL)

		self.abortAllOrdered = True

	def pauseAll(self) :
		import signal, os
		gid = os.getgid()
		signal.signal(signal.SIGTSTP, signal.SIG_IGN)
		os.killpg(gid, signal.SIGTSTP)
		signal.signal(signal.SIGTSTP, signal.SIG_DFL)
		#self.append('<font color="#F62217">Paused by the user</font><br>')
		#self.resumeAllButton.setEnabled(True)
		#self.pauseAllButton.setEnabled(True)
		#self.abortAllButton.setEnabled(False)

	def resumeAll(self) :
		import signal, os
		gid = os.getgid()
		signal.signal(signal.SIGCONT, signal.SIG_IGN)
		os.killpg(gid, signal.SIGCONT)
		signal.signal(signal.SIGCONT, signal.SIG_DFL)

		#self.append('<font color="#F62217">Resumed</font><br>')
		#self.pauseAllButton.setEnabled(True)
		#self.resumeAllButton.setEnabled(False)
		#self.abortAllButton.setEnabled(True)


RunningWindow=RunningWindowWithButtons

class Runner(Thread) :
	def __init__(self, widget, qApp, logger, cmd, runningModule = None) :
		Thread.__init__(self)
		self.widget = widget
		self.qApp = qApp
		self.logger = logger
		self.cmd = cmd
		self.runningModule = runningModule

	def getMessageLettersWords(self, line) :
		letters = []
		words   = []
		current = 0

		beg = line.find('?') + 1
		if beg == 0 :
			beg = line.find('[')
		if beg != -1 :
			current = beg
		else :
			beg = line.find(':')

		while 1 :
			current = line.find('[', current)
			if current == -1 :
				break
			begin = current + 1
			current = line.find(']', current)
			if current == -1 :
				break
			end = current
			letter = line[begin:end]
			if letter.lower() == 'y/n' :
				words = ['Yes', 'No']
				letters = ['y', 'n']
				break
			else :
				word = letter
				k = end + 1
				for k in range(k, len(line)):
					if line[k] in string.letters + ' ' :
						word  = word + line[k]
					else :
						break

				if len(letter) > 1:
					word = word[len(letter):]

				letters.append(letter)
				words.append(word)

		return line[:beg], letters, words


	def call(self, fp) :
		self.qApp.postEvent(self.widget, QCustomEvent(QEvent.User, fp))

	def run(self) :
		self.call((QToolTip.add, (self.logger.textWidget, self.cmd)))
		aborted = not self.runCommand(self.cmd)
		self.call((self.logger.finished,None))
		self.call((self.widget.commandFinished,(aborted,self.logger, self.cmd, self.runningModule)))
		self.call((QToolTip.add, (self.logger.textWidget, '')))

	def askQuestion(self, scriptName, message, words, letters, t, i) :
		if t == 1 :
			if len(words) < 1 :
				return
			if len(words) == 1:
				resp = QMessageBox.warning(self.logger.runWindow, scriptName, message, words[0])
			elif len(words) == 2:
				resp = QMessageBox.warning(self.logger.runWindow, scriptName, message, words[0], words[1])

			#TODO: deal with more than 3 options
			elif len(words) >= 3:
				resp = QMessageBox.warning(self.logger.runWindow, scriptName, message, words[0], words[1], words[2])
			else :
				print 'Too many options...'
			current_question = ''

			i.write(letters[resp].strip())
			i.write('\n')
			i.flush()
		else :
			resp = QMessageBox.warning(self.logger.runWindow, scriptName, message+'\nProceed?', 'Ok', 'Cancel')
			current_question = ''
			if resp == 0 :
				i.write('\n')
			else :
				i.write('n')

			i.write('\n')
			i.flush()

	def runCommand(self, cmd) :
		compatMode = self.widget.configWindow.useCompatibilityModeInteraction.isChecked()
		if compatMode :
			os.system(cmd)
			#print 'Done'
			return True

		self.call((self.logger.append,cmd))

		subProcess = popen2.Popen4(cmd)
		(i, oe) = (subProcess.tochild, subProcess.fromchild)
		self.call((self.logger.setSubprocessPid,subProcess.pid))
		#print 'PID is',subProcess.pid

		errline=''
		do_break = 0
		current_question = ''

		def filterEscapes(s) :
			colors = ['\033[1;30m','\033[1;34m','\033[33m'  ,'\033[1;33m' ,'\033[1;32m',
			          '\033[1;31m','\033[36m'  ,'\033[1;36m','\033[41;37m','\033[0m'     ]
			for c in colors :
				s = s.replace(c, '')
			return s

		def dealWithQuestionLine(line, current_question) :
			line = filterEscapes(line)
			try :
				scriptName = line[:line.index(':')]
				message = line[line.index(':')+1:].strip()
			except :
				scriptName = ''
				message = line.strip()

			#Testing...
			scriptName = cmd

			if not line :
				pass
			else:
				if line.find('[') < line.find(']') :
					(message, letters, words) = self.getMessageLettersWords(line)
					self.call((self.askQuestion, (scriptName, current_question+'\n'+message, words,letters, 1, i)))
					current_question = ''
				elif line.find('Enter to continue or Ctrl-C') > -1 :
					self.call((self.askQuestion, (scriptName, current_question, [], [], 2, i)))
					current_question = ''
				else :
					current_question += message

			return current_question

		while not do_break :
			line = oe.readline()
			if not line :
				break
			else :
				if '\033[0m\033[0m' in line: #NormalNormal
					current_question = dealWithQuestionLine(line,current_question)
				else :
					self.call((self.logger.append,line))
				continue

		if self.logger.abortOrdered :
			self.call((self.widget.playButton.setOn,False))
			self.call((self.logger.append,"\n"))
			return False
		else :
			self.call((self.logger.append,"Done\n"))
			self.call((self.logger.append,"\n"))
			return True
